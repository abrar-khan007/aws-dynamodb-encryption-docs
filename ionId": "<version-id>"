[1mdiff --git a/doc_source/client-server-side.md b/doc_source/client-server-side.md[m
[1mindex 6be52b6..06ee7da 100644[m
[1m--- a/doc_source/client-server-side.md[m
[1m+++ b/doc_source/client-server-side.md[m
[36m@@ -9,6 +9,8 @@[m [mYou can also use the DynamoDB Encryption Client and encryption at rest together\[m
 **Encryption at Rest**[m
 [m
 DynamoDB offers [encryption at rest](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/EncryptionAtRest.html), a *server\-side encryption* option in which DynamoDB transparently encrypts your tables for you when the table is persisted to disk, and decrypts them when you access the table data\. [m
[32m+[m
[32m+[m[32mWith server\-side encryption, your data is encrypted in transit over an HTTPS connection, decrypted at the DynamoDB endpoint, and then re\-encrypted before being stored in DynamoDB\.[m
 + **It's easy to use\.** Just select the encryption option when you create a table\. DynamoDB transparently encrypts and decrypts the table for you\.[m
 + **DynamoDB creates and manages the cryptographic keys\. **The unique key for each table is protected by an [AWS Key Management Service](http://docs.aws.amazon.com/kms/latest/developerguide/) \(AWS KMS\) customer master key that never leaves AWS KMS unencrypted\.[m
 + **All table data is encrypted on disk\. **When an encrypted table is saved to disk, DynamoDB encrypts all table data, including the [primary key](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey) and local and global [secondary indexes](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.SecondaryIndexes)\. If your table has a sort key, some of the sort keys that mark range boundaries are stored in plaintext in the table metadata\.[m
[36m@@ -18,11 +20,12 @@[m [mDynamoDB offers [encryption at rest](http://docs.aws.amazon.com/amazondynamodb/l[m
 [m
 **DynamoDB Encryption Client**[m
 [m
[31m-Client\-side encryption is designed to protect your data at its source\. Your plaintext data is never exposed to any third party, including AWS\. However, you need to add the encryption features to your DynamoDB applications\. [m
[32m+[m[32mClient\-side encryption provides end\-to\-end protection for your data, in transit and at rest, from its source to storage in DynamoDB\. Your plaintext data is never exposed to any third party, including AWS\. However, you need to add the encryption features to your DynamoDB applications\.[m[41m [m
 + **Your data is protected in transit and at rest\.** It is never exposed to any third party, including AWS\.[m
[32m+[m[32m+ **You can sign your table Items\.** You can direct the DynamoDB Encryption Client to calculate a signature over all or part of a table item, including the primary key attributes and the table name\. This signatures allows you to detect unauthorized changes to the item as a whole, including adding or deleting attributes, or swapping attribute values\.[m
 + **You choose how your cryptographic keys are generated and protected\.** You can create and manage them yourself, or use a cryptographic service such as AWS Key Management Service or [AWS CloudHSM](http://docs.aws.amazon.com/cloudhsm/latest/userguide/) to generate and protect your keys\.[m
[31m-+ **You determine how your data is protected by [selecting a cryptographic materials provider](crypto-materials-providers.md) \(CMP\), or writing one of your own\. **The CMP determines the encryption strategy used, including when unique keys are generated, and the encryption and signing algorithms that are used\.[m
[31m-+ **The DynamoDB Encryption Client doesn't encrypt the entire table\.** It encrypts the values of [specified attributes](concepts.md#attribute-actions) in a table item, but not the attribute names\. By default, it doesn't encrypt the names or values of the primary key \(partition key and sort key\)\. It also signs the item so you can detect unauthorized changes to the item as whole\.[m
[32m+[m[32m+ **You determine how your data is protected **by [selecting a cryptographic materials provider](crypto-materials-providers.md) \(CMP\), or writing one of your own\. The CMP determines the encryption strategy used, including when unique keys are generated, and the encryption and signing algorithms that are used\.[m
[32m+[m[32m+ **The DynamoDB Encryption Client doesn't encrypt the entire table\.** You can encrypt selected items in a table, or selected attribute values in some or all items\. However, the DynamoDB Encryption Client does not encrypt an entire item\. It does not encrypt attribute names, or the names or values of the primary key \(partition key and sort key\) attributes\. For details about what is encrypted \(and what is not\), see [Which Fields Are Encrypted and Signed?](encrypted-and-signed.md)\.[m
 [m
 Â [m
 [m
[1mdiff --git a/doc_source/concepts.md b/doc_source/concepts.md[m
[1mindex 0efeb6d..cb808ee 100644[m
[1m--- a/doc_source/concepts.md[m
[1m+++ b/doc_source/concepts.md[m
[36m@@ -37,7 +37,7 @@[m [mThe attribute action values can be one of the following:[m
 + **Sign only** â€“ Include the attribute in the item signature\.[m
 + **Do nothing** â€“ Do not encrypt or sign the attribute\.[m
 [m
[31m-Use **Encrypt and sign** for all attributes that can store sensitive data\. For primary key attributes \(partition key and sort key\), use **Sign only**\. The [Material Description](#material-description) and signature attributes are not signed or encrypted\. You don't need to specify attribute actions for these attributes\.[m
[32m+[m[32mUse **Encrypt and sign** for all attributes that can store sensitive data\. For primary key attributes \(partition key and sort key\), use **Sign only**\. The [material description attribute](#material-description) and the signature attribute are not signed or encrypted\. You don't need to specify attribute actions for these attributes\.[m
 [m
 **Warning**  [m
 Do not encrypt the primary key attributes\. They must remain in plaintext so DynamoDB can find the item without running a full table scan\.[m
[36m@@ -64,7 +64,7 @@[m [mBecause the material description can override secure default values, we recommen[m
 The material description that the [cryptographic materials providers](#concept-material-provider) \(CMPs\) return is known as the *actual material description*\. It describes the actual values that the CMP used when it assembled the cryptographic materials\. It usually consists of the requested material description, if any, with additions and changes\.[m
 [m
 **Material Description Attribute**  [m
[31m-The *actual material description* is stored in a `Material Description` attribute in the encrypted item\. The CMP uses the values in the attribute to generate the cryptographic materials required to verify and decrypt the item\.[m
[32m+[m[32mThe client saves the actual material description in the *material description attribute* of the encrypted item\. The material description attribute name is `amzn-ddb-map-desc` and its value is the actual material description\. The client uses the values in the material description attribute to verify and decrypt the item\.[m
 [m
 ## DynamoDB Encryption Context<a name="encryption-context"></a>[m
 [m
[36m@@ -73,15 +73,15 @@[m [mThe *DynamoDB encryption context* supplies information about the table and item[m
 **Note**  [m
 The *DynamoDB encryption context* in the DynamoDB Encryption Client is not related to the *encryption context* in AWS Key Management Service \(AWS KMS\) and the AWS Encryption SDK\.[m
 [m
[31m-If you interact with the [item encryptor](#item-encryptor) directly, you need to provide a DynamoDB encryption context when you configure your client\. Most helpers create the DynamoDB encryption context for you\.[m
[31m-[m
[31m-The DynamoDB encryption context can include some or all of the following fields\.[m
[32m+[m[32mThe DynamoDB encryption context can include the following fields\. All fields and values are optional\.[m
 + Table name[m
 + Partition key name[m
 + Sort key name[m
 + Attribute name\-value pairs[m
 + [Requested material description](#material-description)[m
 [m
[32m+[m[32mIf you interact with the [item encryptor](#item-encryptor) directly, you need to provide a DynamoDB encryption context when you configure your client\. Most helpers create the DynamoDB encryption context for you\.[m
[32m+[m
 ## Provider Store<a name="provider-store"></a>[m
 [m
 A *provider store* is a component that returns [cryptographic materials providers](#concept-material-provider) \(CMPs\)\. The provider store can create the CMPs or get them from another source, such as another provider store\. The provider store saves versions of the CMPs that it creates in persistent storage in which each stored CMP is identified by the material name of the requester and version number\. [m
[1mdiff --git a/doc_source/direct-kms-provider.md b/doc_source/direct-kms-provider.md[m
[1mindex 7577e7f..ceed911 100644[m
[1m--- a/doc_source/direct-kms-provider.md[m
[1m+++ b/doc_source/direct-kms-provider.md[m
[36m@@ -53,7 +53,7 @@[m [maws_kms_cmp = AwsKmsCryptographicMaterialsProvider(key_id=aws_cmk_id)[m
 The Direct KMS Provider returns encryption and signing keys that are protected by an AWS KMS CMK that you specify, as shown in the following diagram\.[m
 [m
 ![\[The input, processing, and output of the Direct KMS Provider in the DynamoDB Encryption Client\]](http://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/images/directKMS.png)[m
[31m-+ To generate encryption materials, the Direct KMS Provider asks AWS KMS to [generate a unique data key](http://docs.aws.amazon.com/kms/latest/APIReference/API_GenerateDataKey.html) for each item using a [customer master key](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys) \(CMK\) that you specify\. It derives encryption and signing keys for the item from the plaintext copy of the [data key](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys), and then returns the encryption and signing keys, along with the encrypted data key, which is stored in the [Material Description attribute](concepts.md#material-description) of the item\. [m
[32m+[m[32m+ To generate encryption materials, the Direct KMS Provider asks AWS KMS to [generate a unique data key](http://docs.aws.amazon.com/kms/latest/APIReference/API_GenerateDataKey.html) for each item using a [customer master key](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys) \(CMK\) that you specify\. It derives encryption and signing keys for the item from the plaintext copy of the [data key](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys), and then returns the encryption and signing keys, along with the encrypted data key, which is stored in the [material description attribute](concepts.md#material-description) of the item\.[m[41m [m
 [m
   The item encryptor uses the encryption and signing keys and removes them from memory as soon as possible\. Only the encrypted copy of the data key from which they were derived is saved in the encrypted item\.[m
 + To generate decryption materials, the Direct KMS Provider asks AWS KMS to decrypt the encrypted data key\. Then, it derives verification and signing keys from the plaintext data key, and returns them to the item encryptor\.[m
[36m@@ -77,7 +77,7 @@[m [mThis section describes in detail the inputs, outputs, and processing of the Dire[m
 **Output** \(to the item encryptor\)[m
 + Encryption key \(plaintext\)[m
 + Signing key[m
[31m-+ In [actual material description](concepts.md#material-description): These values are saved in the `Material Description` attribute that the client adds to the item\.[m
[32m+[m[32m+ In [actual material description](concepts.md#material-description): These values are saved in the material description attribute that the client adds to the item\.[m
   + amzn\-ddb\-env\-key: Base64\-encoded data key encrypted by the AWS KMS CMK[m
   + amzn\-ddb\-env\-alg: Encryption algorithm, by default [AES/256](https://csrc.nist.gov/projects/cryptographic-standards-and-guidelines/archived-crypto-projects/aes-development)[m
   + amzn\-ddb\-sig\-alg: Signing algorithm, by default, [HmacSHA256/256](https://en.wikipedia.org/wiki/HMAC)[m
[36m@@ -112,7 +112,7 @@[m [mThis section describes in detail the inputs, outputs, and processing of the Dire[m
   The value of the key ID can be the ID or Amazon Resource Name \(ARN\) of the CMK, or an alias or alias ARN, provided that any values that are omitted, such as the region, are available in the [AWS named profile](http://docs.aws.amazon.com/cli/latest/userguide/cli-multiple-profiles.html)\. The CMK ARN provides all of the values that AWS KMS needs\.[m
 [m
 **Input** \(from the item encryptor\)[m
[31m-+ [DynamoDB encryption context](concepts.md#encryption-context)[m
[32m+[m[32m+ A copy of the [DynamoDB encryption context](concepts.md#encryption-context) that contains the contents of the material description attribute\.[m
 [m
 **Output** \(to the item encryptor\)[m
 + Encryption key \(plaintext\)[m
[36m@@ -120,7 +120,7 @@[m [mThis section describes in detail the inputs, outputs, and processing of the Dire[m
 [m
 **Processing**[m
 [m
[31m-1. The Direct KMS provider gets the encrypted data key from the `Material Description` attribute in the encrypted item\. [m
[32m+[m[32m1. The Direct KMS provider gets the encrypted data key from the material description attribute in the encrypted item\.[m[41m [m
 [m
 1. It asks AWS KMS to use the specified CMK to [decrypt](http://docs.aws.amazon.com/kms/latest/APIReference/APIReference/API_GenerateDataKey.html) the encrypted data key\. The operation returns a plaintext key\.[m
 [m
[1mdiff --git a/doc_source/encrypted-and-signed.md b/doc_source/encrypted-and-signed.md[m
[1mindex 061804f..7e3e693 100644[m
[1m--- a/doc_source/encrypted-and-signed.md[m
[1m+++ b/doc_source/encrypted-and-signed.md[m
[36m@@ -1,14 +1,23 @@[m
 # Which Fields Are Encrypted and Signed?<a name="encrypted-and-signed"></a>[m
 [m
[31m-The DynamoDB Encryption Client encrypts the values of selected attributes, and then calculates a signature over the attributes that you specify\. [m
[32m+[m[32mIn DynamoDB, a [table](https://%26url-ddb-dev;HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.TablesItemsAttributes) is a collection of items\. Each *item* is a collection of *attributes*\. Each attribute has a name and a value\.[m
[32m+[m
[32m+[m[32mThe DynamoDB Encryption Client encrypts the values of attributes\. Then, it calculates a signature over the attributes\. You can specify which attribute values to encrypt and which to include in the signature\.[m[41m [m
[32m+[m
[32m+[m[32mEncryption protects the confidentiality of the attribute value\. Signing provides integrity of all signed attributes and their relationship to each other, and provides authentication\. It enables you to detect unauthorized changes to the item as a whole, including adding or deleting attributes, or substituting one encrypted value for another\.[m
 [m
 In an encrypted item, some data remains in plaintext, including the table name, all attribute names, the attribute values that you don't encrypt, and the names and values of the primary key \(partition key and sort key\) attributes\. Do not store sensitive data in these fields\.[m
 [m
[31m-**Encrypting Attribute Values**[m
[32m+[m[32m**Topics**[m
[32m+[m[32m+ [Encrypting Attribute Values](#encrypt-attribute-values)[m
[32m+[m[32m+ [Signing the Item](#sign-the-item)[m
[32m+[m[32m+ [An Encrypted and Signed Item](#encrypted-signed-example)[m
[32m+[m
[32m+[m[32m## Encrypting Attribute Values<a name="encrypt-attribute-values"></a>[m
 [m
[31m-The DynamoDB Encryption Client encrypts the values \(but not the names\) of the attributes that you specify\. To determine which attribute values are encrypted, use an [attribute actions](concepts.md#attribute-actions) object\. [m
[32m+[m[32mThe DynamoDB Encryption Client encrypts the values \(but not the names\) of the attributes that you specify\. To determine which attribute values are encrypted, use [attribute actions](concepts.md#attribute-actions)\.[m[41m [m
 [m
[31m-For example, this item includes example and test attributes\.[m
[32m+[m[32mFor example, this item includes `example` and `test` attributes\.[m
 [m
 ```[m
 'example': 'data',[m
[36m@@ -16,7 +25,7 @@[m [mFor example, this item includes example and test attributes\.[m
 ...[m
 ```[m
 [m
[31m-If you encrypt the `example` attribute, but do nothing to the `test` attribute, the results look like this\.[m
[32m+[m[32mIf you encrypt the `example` attribute, but don't encrypt the `test` attribute, the results look like the following\. The encrypted `example` attribute value is binary data, instead of a string\.[m
 [m
 ```[m
 'example': Binary(b"'b\x933\x9a+s\xf1\xd6a\xc5\xd5\x1aZ\xed\xd6\xce\xe9X\xf0T\xcb\x9fY\x9f\xf3\xc9C\x83\r\xbb\\"),[m
[36m@@ -24,21 +33,39 @@[m [mIf you encrypt the `example` attribute, but do nothing to the `test` attribute,[m
 ...[m
 ```[m
 [m
[32m+[m[32mThe primary key attributesâ€”partition key and sort keyâ€”of each item must remain in plaintext because DynamoDB uses them to find the item in the table\. They should be signed, but not encrypted\.[m[41m [m
[32m+[m
 **Warning**  [m
 Do not encrypt the primary key attributes\. They must remain in plaintext so DynamoDB can find the item without running a full table scan\.[m
 [m
[31m-By default, the primary keyâ€”partition key and sort keyâ€”attributes are signed, but not encrypted\. If you identify your primary key, or use a helper class that identifies it for you, and then try to encrypt it, the client will throw an exception\. If you need to encrypt the primary key for a special use case, use the lower\-level [item encryptor](concepts.md#item-encryptor) directly, but remember that DynamoDB will not be able to find your item\.[m
[32m+[m[32mThe helpers in each programming language identify the primary key attributes for you and ensure that their values are signed, but not encrypted\. And, if you identify your primary key and then try to encrypt it, the client will throw an exception\. If you need to encrypt the primary key for a special use case, use the lower\-level [item encryptor](concepts.md#item-encryptor) directly, but remember that DynamoDB will not be able to find your item without running a full table scan\.[m
 [m
[31m-The DynamoDB Encryption Client also does not encrypt the [Material Description](concepts.md#material-description) attribute, which stores the data that the DynamoDB Encryption Client needs to verify and decrypt the item\. [m
[32m+[m[32mThe DynamoDB Encryption Client also does not encrypt or sign the [material description attribute](concepts.md#material-description), which stores information that the DynamoDB Encryption Client needs to verify and decrypt the item\.[m[41m [m
 [m
[31m-**Signing the Item**[m
[32m+[m[32m## Signing the Item<a name="sign-the-item"></a>[m
 [m
[31m-After encrypting the specified attribute values, the DynamoDB Encryption Client calculates a digital signature over the names and values of attributes that you specify in the [attribute actions](concepts.md#attribute-actions) object\. If you specify a table name, it's included in the signature, too\.[m
[32m+[m[32mAfter encrypting the specified attribute values, the DynamoDB Encryption Client calculates a digital signature over the names and values of attributes that you specify in the [attribute actions](concepts.md#attribute-actions) object\. The client saves the signature in an attribute that it adds to the item\.[m
 [m
 ![\[An encrypted and signed table item\]](http://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/images/encrypted-signed-item.png)[m
 [m
[31m-The signature allows you to detect unauthorized changes to the item as a whole, including adding or deleting attributes, or substituting one encrypted value for another\. The signature is saved in an attribute that the client adds to the item\.[m
[32m+[m[32mIf you provide a table name, it's included in the signature\. This allows you to detect that a signed item was moved to a different table, perhaps maliciously, such as moving an employee record from the `AllEmployees` to `TrustedEmployees` table\. The DynamoDB Encryption Client gets the table name from the [DynamoDB encryption context](concepts.md#encryption-context), where it is an optional field\.[m[41m [m
[32m+[m
[32m+[m[32mBe sure to include the primary key in the signature\. It's the default behavior when you use a helper\. The signature captures the relationship between the primary key and other attributes in the item, and the signature validation verifies that the relationship hasn't changed\.[m[41m [m
[32m+[m
[32m+[m[32mThe [material description attribute](concepts.md#material-description) is not encrypted or signed\.[m
[32m+[m
[32m+[m[32m## An Encrypted and Signed Item<a name="encrypted-signed-example"></a>[m
[32m+[m
[32m+[m[32mWhen the DynamoDB Encryption Client encrypts and signs a table item, the result is a standard DynamoDB table item with encrypted attribute values\.[m[41m [m
[32m+[m
[32m+[m[32mThe following figure shows a part of an example encrypted and signed table item\.[m[41m [m
 [m
[31m-Be sure to include the primary key in the signature\. It's the default behavior when you use a helper class\. The signature captures the relationship between the primary key and other attributes in the item, and the signature validation verifies that the relationship hasn't changed\. [m
[32m+[m[32m![\[An example encrypted and signed table item\]](http://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/images/encrypted-item-closeup.png)[m
 [m
[31m-The [Material Description](concepts.md#material-description) attribute is not encrypted or signed\.[m
\ No newline at end of file[m
[32m+[m[32mThe figure shows the following characteristics of table items that the DynamoDB Encryption Client encrypts and signs:[m
[32m+[m[32m+ All attribute names are in plaintext\.[m
[32m+[m[32m+ The values of the primary key attributes are in plaintext\. In this example, the partition key name is `partition_attribute` and the sort key name is `sort_attribute`\.[m
[32m+[m[32m+ The values of any attributes that you tell the client not to encrypt remain in plaintext\. In this example, the value of the `test` attribute is in plaintext\.[m
[32m+[m[32m+ The values of encrypted attributes are binary data\.[m
[32m+[m[32m+ The client adds a signature attribute \(`*amzn-ddb-map-sig*`\) to the item\. Its value is the item signature\.[m
[32m+[m[32m+ The client adds a [material description attribute](concepts.md#material-description) \(`*amzn-ddb-map-desc*`\) to the item\. Its value describes how the attribute was encrypted and signed\. The client uses this information to verify and decrypt the item\. The material description attribute is not encrypted or signed\.[m
\ No newline at end of file[m
[1mdiff --git a/doc_source/how-it-works.md b/doc_source/how-it-works.md[m
[1mindex 5202a64..11d9539 100644[m
[1m--- a/doc_source/how-it-works.md[m
[1m+++ b/doc_source/how-it-works.md[m
[36m@@ -11,15 +11,14 @@[m [mThe following diagram shows a high\-level view of this process\.[m
 ![\[Encrypting and signing items in the DynamoDB Encryption Client\]](http://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/images/arch-encrypt.png)[m
 [m
 To encrypt and sign a table item, the DynamoDB Encryption Client needs:[m
[31m-+ **Information about the table and the attributes in the table item, including the primary key\. **It gets these from a [DynamoDB encryption context](concepts.md#encryption-context) that you supply\. Some helpers get the required information from DynamoDB and create the DynamoDB encryption context for you\. [m
[32m+[m[32m+ **Information about the table\. ** It gets information about the table from a [DynamoDB encryption context](concepts.md#encryption-context) that you supply\. Some helpers get the required information from DynamoDB and create the DynamoDB encryption context for you\.[m[41m [m
 **Note**  [m
 The *DynamoDB encryption context* in the DynamoDB Encryption Client is not related to the *encryption context* in AWS Key Management Service \(AWS KMS\) and the AWS Encryption SDK\.[m
[31m-+ **Instructions that specify which attribute values to encrypt and which attributes to include in the signature\.** It gets these from the [attribute actions](concepts.md#attribute-actions) that you supply\.[m
[32m+[m[32m+ **Which attributes to encrypt and sign\.** It gets this information from the [attribute actions](concepts.md#attribute-actions) that you supply\.[m
 + **Encryption materials, including encryption and signing keys\.** It gets these from a [cryptographic materials provider](concepts.md#concept-material-provider) \(CMP\) that you select and configure\. [m
[32m+[m[32m+ **Instructions for encrypting and signing the item**\. The CMP adds instructions for using the encryption materials, including encryption and signing algorithms, to the [actual material description](concepts.md#material-description)\.[m
 [m
[31m-  The CMP also determines the encryption strategy, including the encryption algorithms that are used, how encryption keys are generated and managed, and whether cryptographic materials are generated for each item or are reused\. It adds instructions for using the encryption materials, including encryption and signing algorithms, to the [actual material description](concepts.md#material-description) in the DynamoDB encryption context\.[m
[31m-[m
[31m-The [item encryptor](concepts.md#item-encryptor) uses all of these elements to encrypt and sign the item\. The item encryptor also adds two attributes to the item: a [Material Description attribute](concepts.md#material-description) that contains the encryption and signing instructions \(the actual material description\), and an attribute that contains the signature\. You can interact with the item encryptor directly, or use helper features that interact with the item encryptor for you to implement secure default behavior\.[m
[32m+[m[32mThe [item encryptor](concepts.md#item-encryptor) uses all of these elements to encrypt and sign the item\. The item encryptor also adds two attributes to the item: a [material description attribute](concepts.md#material-description) that contains the encryption and signing instructions \(the actual material description\), and an attribute that contains the signature\. You can interact with the item encryptor directly, or use helper features that interact with the item encryptor for you to implement secure default behavior\.[m
 [m
 The result is a DynamoDB item containing encrypted and signed data\.[m
 [m
[36m@@ -30,11 +29,11 @@[m [mThese components also work together to verify and decrypt your item, as shown in[m
 ![\[Verifying and decrypting items in the DynamoDB Encryption Client\]](http://docs.aws.amazon.com/dynamodb-encryption-client/latest/devguide/images/arch-decrypt.png)[m
 [m
 To verify and decrypt an item, the DynamoDB Encryption Client needs the same components, components with the same configuration, or components especially designed for decrypting the items, as follows:[m
[31m-+ **Information about the table and the item attributes** from the [DynamoDB encryption context](concepts.md#encryption-context)\.[m
[31m-+ **Instructions that tell it which attribute values were encrypted and which attributes were included in the signature\.** It gets these from the [attribute actions](concepts.md#attribute-actions)\.[m
[32m+[m[32m+ **Information about the table** from the [DynamoDB encryption context](concepts.md#encryption-context)\.[m
[32m+[m[32m+ **Which attributes to encrypt and sign\.** It gets these from the [attribute actions](concepts.md#attribute-actions)\.[m
 + **Decryption materials, including verification and decryption keys**, from the [cryptographic materials provider](concepts.md#concept-material-provider) \(CMP\) that you select and configure\.[m
 [m
   The encrypted item doesn't include any record of the CMP that was used to encrypt it\. You must supply the same CMP, a CMP with the same configuration, or a CMP that is designed to decrypt items\.[m
[31m-+ The instructions that were used to encrypt and sign the item, including the encryption and signing algorithms\. The client gets these from the Material Description attribute of the item\.[m
[32m+[m[32m+ **Information about how the item was encrypted and signed the item**, including the encryption and signing algorithms\. The client gets these from the [material description attribute](concepts.md#material-description) in the item\.[m
 [m
[31m-The [item encryptor](concepts.md#item-encryptor) uses all of these elements to verify and decrypt the item\. It also removes the Material Description and signature attributes\. The result is a plaintext DynamoDB item\.[m
\ No newline at end of file[m
[32m+[m[32mThe [item encryptor](concepts.md#item-encryptor) uses all of these elements to verify and decrypt the item\. It also removes the material description and signature attributes\. The result is a plaintext DynamoDB item\.[m
\ No newline at end of file[m
[1mdiff --git a/doc_source/index.md b/doc_source/index.md[m
[1mindex ae631fd..e738fa1 100644[m
[1m--- a/doc_source/index.md[m
[1m+++ b/doc_source/index.md[m
[36m@@ -31,4 +31,5 @@[m [mAmazon's trademarks and trade dress may not be used in[m
    + [DynamoDB Encryption Client for Python](python.md)[m
       + [Using the DynamoDB Encryption Client for Python](python-using.md)[m
       + [Example Code for the DynamoDB Encryption Client for Python](python-examples.md)[m
[31m-+ [Troubleshooting Issues in Your DynamoDB Encryption Client Application](troubleshooting.md)[m
\ No newline at end of file[m
[32m+[m[32m+ [Troubleshooting Issues in Your DynamoDB Encryption Client Application](troubleshooting.md)[m
[32m+[m[32m+ [Document History for the Amazon DynamoDB Encryption Client Developer Guide](document-history.md)[m
\ No newline at end of file[m
[1mdiff --git a/doc_source/java-examples.md b/doc_source/java-examples.md[m
[1mindex b9ccf94..91745c5 100644[m
[1m--- a/doc_source/java-examples.md[m
[1m+++ b/doc_source/java-examples.md[m
[36m@@ -7,7 +7,7 @@[m [mThe following examples show you how to use the DynamoDB Encryption Client for Ja[m
 [m
 ## Using the DynamoDBEncryptor and Direct KMS Provider<a name="java-example-ddb-encryptor"></a>[m
 [m
[31m-This example shows how to use the lower\-level [DynamoDBEncryptor](https://awslabs.github.io/aws-dynamodb-encryption-java/javadoc/) with the [Direct KMS Provider](direct-kms-provider.md)\. The Direct KMS Provider generates and protects its cryptographic materials under an AWS Key Management Service \(AWS KMS\) [customer master key](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys) \(CMK\) that you specify\.[m
[32m+[m[32mThis example shows how to use the lower\-level [DynamoDBEncryptor](https://awslabs.github.io/aws-dynamodb-encryption-java/javadoc/com/amazonaws/services/dynamodbv2/datamodeling/encryption/DynamoDBEncryptor.html) with the [Direct KMS Provider](direct-kms-provider.md)\. The Direct KMS Provider generates and protects its cryptographic materials under an AWS Key Management Service \(AWS KMS\) [customer master key](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys) \(CMK\) that you specify\.[m
 [m
 You can use any compatible [cryptographic materials provider](concepts.md#concept-material-provider) \(CMP\) with the `DynamoDBEncryptor`, and you can use the Direct KMS Provider with the `DynamoDBMapper` and [AttributeEncryptor](java-using.md#attribute-encryptor)\.[m
 [m
[1mdiff --git a/doc_source/most-recent-provider.md b/doc_source/most-recent-provider.md[m
[1mindex 8b1f4c0..16cb756 100644[m
[1m--- a/doc_source/most-recent-provider.md[m
[1m+++ b/doc_source/most-recent-provider.md[m
[36m@@ -151,7 +151,7 @@[m [mWhen the item encryptor asks the Most Recent Provider for encryption materials,[m
 [m
   1. The provider store returns a CMP from its persistent storage\. If the provider store is a MetaStore, it gets an encrypted Wrapped CMP from its internal DynamoDB table by using the Most Recent Provider material name as the partition key and the version number as the sort key\. The MetaStore uses its internal item encryptor and internal CMP to decrypt the Wrapped CMP\. Then, it returns the plaintext CMP to the Most Recent Provider \. If the internal CMP is a [Direct KMS Provider](direct-kms-provider.md), this step includes a call to the [AWS Key Management Service](http://docs.aws.amazon.com/kms/latest/developerguide/) \(AWS KMS\)\.[m
 [m
[31m-  1. The CMP adds the `amzn-ddb-meta-id` field to the [actual material description](concepts.md#material-description)\. Its value is the material name and version of the CMP in its internal table\. This information is used to find the CMP when the item is decrypted\. The provider store returns the CMP to the Most Recent Provider\.[m
[32m+[m[32m  1. The CMP adds the `amzn-ddb-meta-id` field to the [actual material description](concepts.md#material-description)\. Its value is the material name and version of the CMP in its internal table\. The provider store returns the CMP to the Most Recent Provider\.[m
 [m
   1. The Most Recent Provider caches the CMP in memory\.[m
 [m
[36m@@ -161,7 +161,7 @@[m [mWhen the item encryptor asks the Most Recent Provider for encryption materials,[m
 [m
 When the item encryptor asks the Most Recent Provider for decryption materials, the Most Recent Provider uses the following process to get and return them\.[m
 [m
[31m-1. The Most Recent Provider asks the provider store for the version number of the cryptographic materials that were used to encrypt the item\. It passes in the actual material description from the Material Description attribute of the item\.[m
[32m+[m[32m1. The Most Recent Provider asks the provider store for the version number of the cryptographic materials that were used to encrypt the item\. It passes in the actual material description from the [material description attribute](concepts.md#material-description) of the item\.[m
 [m
 1. The provider store gets the encrypting CMP version number from the `amzn-ddb-meta-id` field in the actual material description and returns it to the Most Recent Provider\.[m
 [m
[1mdiff --git a/doc_source/python.md b/doc_source/python.md[m
[1mindex 05f5214..cdfca39 100644[m
[1m--- a/doc_source/python.md[m
[1m+++ b/doc_source/python.md[m
[36m@@ -25,7 +25,7 @@[m [mUse **pip** to install the Amazon DynamoDB Encryption Client for Python, as show[m
 **To install the latest version**  [m
 [m
 ```[m
[31m-pip install aws-dynamodb-encryption-python[m
[32m+[m[32mpip install dynamodb-encryption-sdk[m
 ```[m
 [m
 For more details about using **pip** to install and upgrade packages, see [Installing Packages](https://packaging.python.org/tutorials/installing-packages/)\.[m
[1mdiff --git a/doc_source/static-provider.md b/doc_source/static-provider.md[m
[1mindex aa4384d..a64f5b0 100644[m
[1m--- a/doc_source/static-provider.md[m
[1m+++ b/doc_source/static-provider.md[m
[36m@@ -74,14 +74,14 @@[m [mThe Static Provider passes the encryption and signing keys that you supply to th[m
 [m
 This section describes in detail the inputs, outputs, and processing of the Static Materials Provider \(Static CMP\) when it receives a request for encryption materials\.[m
 [m
[31m-**Inputs** \(from the application\)[m
[32m+[m[32m**Input** \(from the application\)[m
 + An encryption key â€“ This must be a symmetric key, such as an [Advanced Encryption Standard](https://tools.ietf.org/html/rfc3394.html) \(AES\) key\. [m
 + A signing key â€“ This can be a symmetric key or an asymmetric key pair\. [m
 [m
[31m-**Inputs** \(from the item encryptor\)[m
[32m+[m[32m**Input** \(from the item encryptor\)[m
 + [DynamoDB encryption context](concepts.md#encryption-context)[m
 [m
[31m-**Outputs** \(to the item encryptor\)[m
[32m+[m[32m**Output** \(to the item encryptor\)[m
 + The encryption key passed as input\.[m
 + The signing key passed as input\.[m
 + Actual material description: The [requested material description](concepts.md#material-description), if any, unchanged\.[m
[36m@@ -92,13 +92,13 @@[m [mThis section describes in detail the inputs, outputs, and processing of the Stat[m
 [m
 Although it includes separate methods for getting encryption materials and getting decryption materials, the behavior is the same\. [m
 [m
[31m-**Inputs** \(from the application\)[m
[32m+[m[32m**Input** \(from the application\)[m
 + An encryption key â€“ This must be a symmetric key, such as an [Advanced Encryption Standard](https://tools.ietf.org/html/rfc3394.html) \(AES\) key\. [m
 + A signing key â€“ This can be a symmetric key or an asymmetric key pair\. [m
 [m
[31m-**Inputs** \(from the item encryptor\)[m
[31m-+ [DynamoDB encryption context](concepts.md#encryption-context)[m
[32m+[m[32m**Input** \(from the item encryptor\)[m
[32m+[m[32m+ [DynamoDB encryption context](concepts.md#encryption-context) \(not used\)[m
 [m
[31m-**Outputs** \(to the item encryptor\)[m
[32m+[m[32m**Output** \(to the item encryptor\)[m
 + The encryption key passed as input\.[m
 + The signing key passed as input\.[m
\ No newline at end of file[m
[1mdiff --git a/doc_source/troubleshooting.md b/doc_source/troubleshooting.md[m
[1mindex e3a4a4b..638759d 100644[m
[1m--- a/doc_source/troubleshooting.md[m
[1m+++ b/doc_source/troubleshooting.md[m
[36m@@ -2,7 +2,7 @@[m
 [m
 This section describes problems that you might encounter when using the DynamoDB Encryption Client and offers suggestions for resolving them\.[m
 [m
[31m-If you have questions about using the DynamoDB Encryption Client, start a new thread on the [AWS Key Management Service forum](https://forums.aws.amazon.com/forum.jspa?forumID=182), file an issue in the GitHub repository for the [Java](https://github.com/awslabs/aws-dynamodb-encryption-java/) or [Python](https://github.com/awslabs/aws-dynamodb-encryption-python/) library, or contact [AWS Support](https://console.aws.amazon.com/support/home)\.[m
[32m+[m[32mIf you have questions about using the DynamoDB Encryption Client, read and post on the [AWS Crypto Tools Discussion Forum](https://forums.aws.amazon.com/forum.jspa?forumID=302), file an issue in the GitHub repository for the [Java](https://github.com/awslabs/aws-dynamodb-encryption-java/) or [Python](https://github.com/awslabs/aws-dynamodb-encryption-python/) library, or contact [AWS Support](https://console.aws.amazon.com/support/home)\.[m
 [m
 To suggest changes to any page in this guide, choose the feedback link in the lower\-right corner of the page, or the GitHub link in the upper\-right corner of the page\. You can also file an issue in the [aws\-dynamodb\-encryption\-docs](https://github.com/awsdocs/aws-dynamodb-encryption-docs) GitHub repository for this guide\.[m
 [m
[1mdiff --git a/doc_source/what-is-ddb-encrypt.md b/doc_source/what-is-ddb-encrypt.md[m
[1mindex ef2ce2c..23c0462 100644[m
[1m--- a/doc_source/what-is-ddb-encrypt.md[m
[1m+++ b/doc_source/what-is-ddb-encrypt.md[m
[36m@@ -20,10 +20,12 @@[m [mYou can use the DynamoDB Encryption Client with encryption keys from any source,[m
 The DynamoDB Encryption Client libraries are developed in open source projects on GitHub\. They are currently available in [Java](https://github.com/awslabs/aws-dynamodb-encryption-java/) and [Python](https://github.com/awslabs/aws-dynamodb-encryption-python/)\.  All supported programming language implementations of the DynamoDB Encryption Client are interoperable\. For example, you can encrypt data with the Java client and decrypt it with the Python client\.   [m
 However, the DynamoDB Encryption Client is not compatible with the [AWS Encryption SDK](http://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/) or the [Amazon S3 Encryption Client](http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html)\. You cannot encrypt with one client\-side library and decrypt with another\.[m
 [m
[31m-If you have questions about using the DynamoDB Encryption Client, start a new thread on the [AWS Key Management Service forum](https://forums.aws.amazon.com/forum.jspa?forumID=182), file an issue in the GitHub repository for the [Java](https://github.com/awslabs/aws-dynamodb-encryption-java/) or [Python](https://github.com/awslabs/aws-dynamodb-encryption-python/) library, or contact [AWS Support](https://console.aws.amazon.com/support/home)\.[m
[32m+[m[32mIf you have questions about using the DynamoDB Encryption Client, read and post on the [AWS Crypto Tools Discussion Forum](https://forums.aws.amazon.com/forum.jspa?forumID=302), file an issue in the GitHub repository for the [Java](https://github.com/awslabs/aws-dynamodb-encryption-java/) or [Python](https://github.com/awslabs/aws-dynamodb-encryption-python/) library, or contact [AWS Support](https://console.aws.amazon.com/support/home)\.[m
 [m
 To suggest changes to any page in this guide, choose the feedback link in the lower\-right corner of the page, or the GitHub link in the upper\-right corner of the page\. You can also file an issue in the [aws\-dynamodb\-encryption\-docs](https://github.com/awsdocs/aws-dynamodb-encryption-docs) GitHub repository for this guide\.[m
 [m
[32m+[m[32mThe Amazon DynamoDB Encryption Client is provided free of charge under the Apache license\.[m
[32m+[m
 **Topics**[m
 + [Which Fields Are Encrypted and Signed?](encrypted-and-signed.md)[m
 + [How the DynamoDB Encryption Client Works](how-it-works.md)[m
[1mdiff --git a/doc_source/wrapped-provider.md b/doc_source/wrapped-provider.md[m
[1mindex cc4b0b2..2e18f4c 100644[m
[1m--- a/doc_source/wrapped-provider.md[m
[1m+++ b/doc_source/wrapped-provider.md[m
[36m@@ -2,7 +2,7 @@[m
 [m
 The Wrapped Materials Provider \(Wrapped CMP\) lets you use wrapping and signing keys from any source with the DynamoDB Encryption Client\. The Wrapped CMP does not depend on any AWS service\. However, you must generate and manage your wrapping and signing keys outside of the client, including providing the correct keys to verify and decrypt the item\. [m
 [m
[31m-The Wrapped CMP generates a unique item encryption key for each item\. It wraps the item encryption key with the wrapping key that you provide and saves the wrapped item encryption key in the [Material Description attribute](concepts.md#material-description) of the item\. Because you supply the wrapping and signing keys, you determine how the wrapping and signing keys are generated and whether they are unique to each item or are reused\. [m
[32m+[m[32mThe Wrapped CMP generates a unique item encryption key for each item\. It wraps the item encryption key with the wrapping key that you provide and saves the wrapped item encryption key in the [material description attribute](concepts.md#material-description) of the item\. Because you supply the wrapping and signing keys, you determine how the wrapping and signing keys are generated and whether they are unique to each item or are reused\.[m[41m [m
 [m
 The Wrapped CMP is a secure implementation and a good choice for applications that can manage cryptographic materials\.[m
 [m
[36m@@ -72,13 +72,13 @@[m [mThis section describes in detail the inputs, outputs, and processing of the Wrap[m
 + Unwrapping key: Optional and ignored\. [m
 + Signing key[m
 [m
[31m-**Inputs** \(from the item encryptor\)[m
[32m+[m[32m**Input** \(from the item encryptor\)[m
 + [DynamoDB encryption context](concepts.md#encryption-context)[m
 [m
 **Output** \(to the item encryptor\):[m
 + Plaintext item encryption key[m
 + Signing key \(unchanged\)[m
[31m-+ [Actual material description](concepts.md#material-description): These values are saved in the [Material Description attribute](concepts.md#material-description) that the client adds to the item\. [m
[32m+[m[32m+ [Actual material description](concepts.md#material-description): These values are saved in the [material description attribute](concepts.md#material-description) that the client adds to the item\.[m[41m [m
   + `amzn-ddb-env-key`: Base64\-encoded wrapped item encryption key[m
   + `amzn-ddb-env-alg`: Encryption algorithm used to encrypt the item\. The default is AES\-256\-CBC\.[m
   + `amzn-ddb-wrap-alg`: The wrapping algorithm that the Wrapped CMP used to wrap the item encryption key\. If the wrapping key is an AES key, the key is wrapped using unpadded `AES-Keywrap` as defined in [RFC 3394](https://tools.ietf.org/html/rfc3394.html)\. If the wrapping key is an RSA key, the key is encrypted by using RSA OAEP with MGF1 padding\. [m
[36m@@ -93,7 +93,7 @@[m [mWhen you encrypt an item, you pass in a wrapping key and a signing key\. An unwr[m
 [m
 1. It returns the plaintext item encryption key, the signing key that you supplied, and an [actual material description](concepts.md#material-description) that includes the wrapped item encryption key, and the encryption and wrapping algorithms\.[m
 [m
[31m-1. The item encryptor uses the plaintext encryption key to encrypt the item\. It uses the signing key that you supplied to sign the item\. Then, it removes the plaintext keys from memory as soon as possible\. It copies the fields in the actual material description, including the wrapped encryption key \(`amzn-ddb-env-key`\), to the `Material Description` attribute of the item\.[m
[32m+[m[32m1. The item encryptor uses the plaintext encryption key to encrypt the item\. It uses the signing key that you supplied to sign the item\. Then, it removes the plaintext keys from memory as soon as possible\. It copies the fields in the actual material description, including the wrapped encryption key \(`amzn-ddb-env-key`\), to the material description attribute of the item\.[m
 [m
 ### Get Decryption Materials<a name="wrapped-cmp-get-decryption-materials"></a>[m
 [m
[36m@@ -104,8 +104,8 @@[m [mThis section describes in detail the inputs, outputs, and processing of the Wrap[m
 + Unwrapping key: The same [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard) \(AES\) symmetric key or [RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) private key that corresponds to the RSA public key used to encrypt\. Required if any attribute values are encrypted\. Otherwise, it is optional and ignored\.[m
 + Signing key[m
 [m
[31m-**Inputs** \(from the item encryptor\)[m
[31m-+ [DynamoDB encryption context](concepts.md#encryption-context)[m
[32m+[m[32m**Input** \(from the item encryptor\)[m
[32m+[m[32m+ A copy of the [DynamoDB encryption context](concepts.md#encryption-context) that contains the contents of the material description attribute\.[m
 [m
 **Output** \(to the item encryptor\)[m
 + Plaintext item encryption key[m
[36m@@ -115,7 +115,7 @@[m [mThis section describes in detail the inputs, outputs, and processing of the Wrap[m
 [m
 When you decrypt an item, you pass in an unwrapping key and a signing key\. A wrapping key is optional and ignored\.[m
 [m
[31m-1. The Wrapped CMP gets the wrapped item encryption key from the `Material Description` attribute of the item\.[m
[32m+[m[32m1. The Wrapped CMP gets the wrapped item encryption key from the material description attribute of the item\.[m
 [m
 1. It uses the unwrapping key and algorithm to unwrap the item encryption key\. [m
 [m
