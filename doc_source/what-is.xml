<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
 [
  <!ENTITY % phrases-ddb-encrypt SYSTEM "shared/phrases-ddb-encrypt.ent">
  %phrases-ddb-encrypt;
   <!ENTITY % phrases-kms SYSTEM "shared/phrases-kms.ent">
    %phrases-kms;  
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
  %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
  %phrases-shared;
 ]>
<chapter role="topic" id="what-is-ddb-encrypt">
  <info>
    <title id="what-is-ddb-encrypt.title">What is the &DDBEClong;?</title>
    <abstract>
      <para>Introduces the &DDBEClong;, a software library and specification that helps you to
        protect the data that you store in <ulink url="&url-ddb-dev;">&DDBlong;</ulink> with secure
        client-side encryption.</para>
    </abstract>
  </info>
  <para>The &DDBEClong; is a software library that helps you to protect your table data before you
    send it to <ulink url="&url-ddb-dev;">&DDBlong;</ulink>. Encrypting your sensitive data in
    transit and at rest helps ensure that your plaintext data isn’t available to any third party,
    including AWS. The &DDBEC; is provided free of charge under the Apache 2.0 license.</para>
  <para>This developer guide provides a conceptual overview of the &DDBEC;, including an <link
    linkend="how-it-works">introduction to its architecture</link>, details about <link
    linkend="encrypted-and-signed">how it protects &DDB; table data</link> and how it differs from
    <link linkend="client-server-side">&DDB; server-side encryption</link>, guidance on <link
    linkend="crypto-materials-providers">selecting critical components for your application</link>,
    and examples in each <link linkend="programming-languages">programming language</link> to help
    you get started.</para>
  <para>The &DDBEC; has the following benefits:</para>
  <variablelist role="termdef">
    <varlistentry>
      <term>Designed especially for &DDB; applications</term>
      <listitem>
        <para>You don’t need to be a cryptography expert to use the DynamoDB Encryption Client. The
          implementations include helper methods that are designed to work with your existing
          DynamoDB applications. </para>
        <para>After you create and configure the required components, the DynamoDB Encryption Client
          transparently encrypts and signs your table items when you add them to a table, and
          verifies and decrypts them when you retrieve them.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Includes secure encryption and signing</term>
      <listitem>
        <para>The &DDBEC; includes secure implementations that encrypt the attribute values in each
          table item using a unique encryption key, and then sign the item to protect it against
          unauthorized changes, such as adding or deleting attributes, or swapping encrypted
          values.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Uses cryptographic materials from any source</term>
      <listitem>
        <para>You can use the DynamoDB Encryption Client with encryption keys from any source,
          including your custom implementation or a cryptography service, such as <ulink
          url="&url-kms-dev;">AWS Key Management Service</ulink> (AWS KMS) or <ulink
          url="&url-hsm-ug;">AWS CloudHSM</ulink>. The &DDBEC; doesn't require an AWS account or any
          AWS service.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Programming language implementations are interoperable</term>
      <listitem>
        <para>The &DDBEC; libraries are developed in open source projects on GitHub. They are
          currently available in <ulink url="&url-ddbec-java;">Java</ulink> and <ulink
            url="&url-ddbec-python;">Python</ulink>.
          <!-- The repository also includes a specification to help you develop a compatible client in other programming languages.-->
          All supported programming language implementations of the &DDBEC; are interoperable. For
          example, you can encrypt data with the Java client and decrypt it with the Python client. </para>
        <para>However, the &DDBEC; is not compatible with the <ulink url="&url-CryptoSDK-dev;"
          >&CryptoSDKlong;</ulink> or the <ulink url="&url-s3-dev;UsingClientSideEncryption.html"
          >&S3; Encryption Client</ulink>. You cannot encrypt with one client-side library and
          decrypt with another.</para>
      </listitem>
    </varlistentry>
  </variablelist> 
  
  
  <section id="feedback"><info><title id="feedback.title">Sending feedback</title></info>
    <para>We welcome your feedback! If you have a question or comment, or an issue to report, please use
      the following resources.</para>
    <itemizedlist>
      <listitem>
        <para>If you discover a potential security vulnerability in the &DDBEC;, please <ulink
          url="&url-mkt-domain;security/vulnerability-reporting/">notify &AWS; security</ulink>.
          Do not create a public GitHub issue.</para>
      </listitem>
      <listitem>
        &get-help-code;
      </listitem>
      <listitem>
        &help-with-docs;
      </listitem>
    </itemizedlist>    
  </section>  
  
  <xi:include href="what-is-encrypted-signed.xml"/>
  <xi:include href="what-is-how-it-works.xml"/>
  <xi:include href="what-is-client-server-side.xml"/>
  <xi:include href="what-is-concepts.xml"/>

 </chapter>
