<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd" [
  <!ENTITY % phrases-ddb-encrypt SYSTEM "shared/phrases-ddb-encrypt.ent">
  %phrases-ddb-encrypt;
  <!ENTITY % phrases-encryption-sdk SYSTEM "shared/phrases-encryption-sdk.ent">
  %phrases-encryption-sdk;
  <!ENTITY % phrases-kms SYSTEM "shared/phrases-kms.ent">
  %phrases-kms;
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
    %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
    %phrases-shared;
]>
<section id="java-examples" role="topic">
  <info>
    <title id="java-examples.title">Example code for the &DDBEC; for Java</title>
    <titleabbrev id="java-example-code.titleabbrev">Java examples</titleabbrev>
    <abstract>
      <para>Example code for learning how to use the &DDBEC; for Java.</para>
    </abstract>
  </info>



  <para>The following examples show you how to use the &DDBEC; for Java to protect &DDB; table items
    in your application. You can find more examples (and contribute your own) in the <ulink
    url="&url-ddbec-java;tree/master/examples">examples</ulink> directory of the <ulink
    url="&url-ddbec-java;">aws-dynamodb-encryption-java</ulink> repository on GitHub.</para>

  <para role="topiclist"><!-- TOPICLIST --></para>

  <section id="java-example-ddb-encryptor">
    <info>
      <title id="java-example-ddb-encryptor.title">Using the DynamoDBEncryptor</title>
    </info>
    <para>This example shows how to use the lower-level <ulink
      url="&url-ddbec-javadoc;com/amazonaws/services/dynamodbv2/datamodeling/encryption/DynamoDBEncryptor.html"
      >DynamoDBEncryptor</ulink> with the <link linkend="direct-kms-provider">Direct KMS
      Provider</link>. The &direct-kms; generates and protects its cryptographic materials
      under an &KMSlong; (&KMS;) <ulink url="&url-kms-dev;concepts.html#master_keys">&CMKlong;</ulink> (&CMK;) that you specify.</para>
    <para>You can use any compatible <link linkend="concept-material-provider">cryptographic
      materials provider</link> (CMP) with the <code>DynamoDBEncryptor</code>, and you can use the
      &direct-kms; with the <code>DynamoDBMapper</code> and <link
      linkend="attribute-encryptor">AttributeEncryptor</link>.</para>
    <para><emphasis role="bold">See the complete code sample</emphasis>: <ulink
      url="&url-ddbec-java;blob/master/examples/com/amazonaws/examples/AwsKmsEncryptedItem.java"
      >AwsKmsEncryptedItem.java</ulink></para>
    <variablelist>
      <varlistentry>
        <term>Step 1: Create the &direct-kms;</term>
        <listitem>
          <para>Create an instance of the &KMS; client with the specified region. Then, use the
            client instance to create an instance of the &direct-kms; with your preferred
            &CMK;. </para>
          <para>This example uses the Amazon Resource Name (ARN) to identify the &CMK;, but you can
            use <ulink url="&url-kms-dev;viewing-keys.html#find-cmk-id-arn">any valid &CMK;
            identifier</ulink>. </para>
          <programlisting language="java">final String cmkArn = '&example-key-arn-1;'
final String region = 'us-west-2'
      
final AWSKMS kms = AWSKMSClientBuilder.standard().withRegion(<replaceable>region</replaceable>).build();
final DirectKmsMaterialProvider cmp = new DirectKmsMaterialProvider(kms, <replaceable>cmkArn</replaceable>);</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 2: Create an item</term>
        <listitem>
          <para>This example defines a <code>record</code> HashMap that represents a sample table
            item.</para>
          <programlisting language="java">final String partitionKeyName = "partition_attribute";
final String sortKeyName = "sort_attribute";

final Map&lt;String, AttributeValue&gt; record = new HashMap&lt;&gt;();
record.put(partitionKeyName, new AttributeValue().withS("value1"));
record.put(sortKeyName, new AttributeValue().withN("55"));
record.put("example", new AttributeValue().withS("data"));
record.put("numbers", new AttributeValue().withN("99"));
record.put("binary", new AttributeValue().withB(ByteBuffer.wrap(new byte[]{0x00, 0x01, 0x02})));
record.put("test", new AttributeValue().withS("test-value"));</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 3: Create a DynamoDBEncryptor</term>
        <listitem>
          <para>Create an instance of the <code>DynamoDBEncryptor</code> with the Direct KMS
            Provider.</para>
          <programlisting language="java">final DynamoDBEncryptor encryptor = DynamoDBEncryptor.getInstance(cmp);</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 4: Create a &DDB; encryption context</term>
        <listitem>
          <para>The <link linkend="encryption-context">&DDB; encryption context</link> contains
            information about the table structure and how it is encrypted and signed. If you use the
            <code>DynamoDBMapper</code>, the <code>AttributeEncryptor</code> creates the encryption
            context for you.</para>
          <programlisting language="java">final String tableName = "testTable";

final EncryptionContext encryptionContext = new EncryptionContext.Builder()
    .withTableName(tableName)
    .withHashKeyName(partitionKeyName)
    .withRangeKeyName(sortKeyName)
    .build();</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 5: Create the attribute actions object</term>
        <listitem>
          <para><link linkend="attribute-actions">Attribute actions</link> determine which
            attributes of the item are encrypted and signed, which are only signed, and which are
            not encrypted or signed.</para>
          <para>In Java, to specify attribute actions, you create a HashMap of attribute name and
            <code>EncryptionFlags</code> value pairs. </para>
          <para>For example, the following Java code creates an <code>actions</code> HashMap that
            encrypts and signs all attributes in the <code>record</code> item, except for the
            partition key and sort key attributes, which are signed, but not encrypted, and the
            <code>test</code> attribute, which is not signed or encrypted.</para>

          <programlisting language="java">final EnumSet&lt;EncryptionFlags> signOnly = EnumSet.of(EncryptionFlags.SIGN);
final EnumSet&lt;EncryptionFlags> encryptAndSign = EnumSet.of(EncryptionFlags.ENCRYPT, EncryptionFlags.SIGN);
final Map&lt;String, Set&lt;EncryptionFlags>> actions = new HashMap&lt;>();

for (final String attributeName : record.keySet()) {
  switch (attributeName) {
    case partitionKeyName: // fall through to the next case
    case sortKeyName:
      // Partition and sort keys must not be encrypted, but should be signed
      actions.put(attributeName, signOnly);
      break;
    case "test":
      // Neither encrypted nor signed
      break;
    default:
      // Encrypt and sign all other attributes
      actions.put(attributeName, encryptAndSign);
      break;
  }
}</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 6: Encrypt and sign the item</term>
        <listitem>
          <para>To encrypt and sign the table item, call the <code>encryptRecord</code> method on
            the instance of the <code>DynamoDBEncryptor</code>. Specify the table item
            (<code>record</code>), the attribute actions (<code>actions</code>), and the encryption
            context (<code>encryptionContext</code>).</para>
          <programlisting language="java">final Map&lt;String, AttributeValue> encrypted_record = encryptor.encryptRecord(record, actions, encryptionContext);</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 7: Put the item in the &DDB; table</term>
        <listitem>
          <para>Finally, put the encrypted and signed item in the &DDB; table.</para>
          <programlisting language="java">final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
ddb.putItem(tableName, encrypted_record);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>


  <section id="java-example-dynamodb-mapper">
    <info>
      <title id="java-example-dynamodb-mapper.title">Using the DynamoDBMapper</title>
    </info>
    <para>The following example shows you how to use the &DDB; mapper helper class with the <link
      linkend="direct-kms-provider">&direct-kms;</link>. The &direct-kms; generates
      and protects its cryptographic materials under an &KMSlong; (&KMS;) <ulink
      url="&url-kms-dev;concepts.html#master_keys">&CMKlong;</ulink> (&CMK;) that you
      specify.</para>
    <para>You can use any compatible <link linkend="concept-material-provider">cryptographic
      materials provider</link> (CMP) with the <code>DynamoDBMapper</code>, and you can use the
      &direct-kms; with the lower-level <code>DynamoDBEncryptor</code>.</para>
    <para><emphasis role="bold">See the complete code sample</emphasis>: <ulink
      url="&url-ddbec-java;blob/master/examples/com/amazonaws/examples/AwsKmsEncryptedObject.java"
      >AwsKmsEncryptedObject.java</ulink></para>
    <variablelist>
      <varlistentry>
        <term>Step 1: Create the &direct-kms;</term>
        <listitem>
          <para>Create an instance of the &KMS; client with the specified region. Then, use the
            client instance to create an instance of the &direct-kms; with your preferred
            &CMK;. </para>
          <para>This example uses the Amazon Resource Name (ARN) to identify the &CMK;, but you can
            use <ulink url="&url-kms-dev;viewing-keys.html#find-cmk-id-arn">any valid &CMK;
            identifier</ulink>. </para>
          <programlisting language="java">final String cmkArn = '&example-key-arn-1;'
final String region = 'us-west-2'
      
final AWSKMS kms = AWSKMSClientBuilder.standard().withRegion(region).build();
final DirectKmsMaterialProvider cmp = new DirectKmsMaterialProvider(kms, cmkArn);</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 2: Create the DynamoDB Encryptor and DynamoDBMapper</term>
        <listitem>
          <para>Use the &direct-kms; that you created in the previous step to create an
            instance of the <link linkend="attribute-encryptor">&DDB; Encryptor</link>. You need to
            instantiate the lower-level &DDB; Encryptor to use the &DDB; Mapper.</para>
          <para>Next, create an instance of your &DDB; database and a mapper configuration, and use
            them to create an instance of the &DDB; Mapper. </para>
          <important>
            <para>When using the <code>DynamoDBMapper</code> to add or edit signed (or encrypted and
              signed) items, configure it to <link linkend="save-behavior">use a save
              behavior</link>, such as <code>PUT</code>, that includes all attributes, as shown in
              the following example. Otherwise, you might not be able to decrypt your data. </para>
          </important>
          <programlisting language="java">final DynamoDBEncryptor encryptor = DynamoDBEncryptor.getInstance(cmp)
final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.standard().withRegion(region).build();

DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder().withSaveBehavior(SaveBehavior.PUT).build();
DynamoDBMapper mapper = new DynamoDBMapper(ddb, mapperConfig, new AttributeEncryptor(encryptor));</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 3: Define your &DDB; table</term>
        <listitem>
          <para>Next, define your &DDB; table. Use annotations to specify the <link
            linkend="attribute-actions-java">attribute actions</link>. This example creates a &DDB;
            table, <code>ExampleTable</code>, and a <code>DataPoJo</code> class that represents
            table items. </para>
          <para>In this sample table, the primary key attributes will be signed but not encrypted.
            This applies to the <code>partition_attribute</code>, which is annotated with
            <code>@DynamoDBHashKey</code>, and the <code>sort_attribute</code>, which is annotated
            with <code>@DynamoDBRangeKey</code>. </para>
          <para>Attributes that are annotated with <code>@DynamoDBAttribute</code>, such as
            <code>some numbers</code>, will be encrypted and signed. The exceptions are attributes
            that use the <code>@DoNotEncrypt</code> (sign only) or <code>@DoNotTouch</code> (do not
            encrypt or sign) encryption annotations defined by the &DDBEC;. For example, because the
            <code>leave me</code> attribute has a <code>@DoNotTouch</code> annotation, it will not
            be encrypted or signed.</para>
          <programlisting language="java">@DynamoDBTable(tableName = "ExampleTable")
public static final class DataPoJo {
  private String partitionAttribute;
  private int sortAttribute;
  private String example;
  private long someNumbers;
  private byte[] someBinary;
  private String leaveMe;

  @DynamoDBHashKey(attributeName = "partition_attribute")
  public String getPartitionAttribute() {
    return partitionAttribute;
  }

  public void setPartitionAttribute(String partitionAttribute) {
    this.partitionAttribute = partitionAttribute;
  }

  @DynamoDBRangeKey(attributeName = "sort_attribute")
  public int getSortAttribute() {
    return sortAttribute;
  }

  public void setSortAttribute(int sortAttribute) {
    this.sortAttribute = sortAttribute;
  }

  @DynamoDBAttribute(attributeName = "example")
  public String getExample() {
    return example;
  }

  public void setExample(String example) {
    this.example = example;
  }

  @DynamoDBAttribute(attributeName = "some numbers")
  public long getSomeNumbers() {
    return someNumbers;
  }

  public void setSomeNumbers(long someNumbers) {
    this.someNumbers = someNumbers;
  }

  @DynamoDBAttribute(attributeName = "and some binary")
  public byte[] getSomeBinary() {
    return someBinary;
  }

  public void setSomeBinary(byte[] someBinary) {
    this.someBinary = someBinary;
  }

  @DynamoDBAttribute(attributeName = "leave me")
  @DoNotTouch
  public String getLeaveMe() {
    return leaveMe;
  }

  public void setLeaveMe(String leaveMe) {
    this.leaveMe = leaveMe;
  }

  @Override
  public String toString() {
    return "DataPoJo [partitionAttribute=" + partitionAttribute + ", sortAttribute="
        + sortAttribute + ", example=" + example + ", someNumbers=" + someNumbers
        + ", someBinary=" + Arrays.toString(someBinary) + ", leaveMe=" + leaveMe + "]";
  }
}</programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Step 4: Encrypt and save a table item</term>
        <listitem>
          <para>Now, when you create a table item and use the &DDB; Mapper to save it, the item is
            automatically encrypted and signed before it is added to the table.</para>
          <para>This example defines a table item called <code>record</code>. Before it is saved in
            the table, its attributes are encrypted and signed based on the annotations in the
            <code>DataPoJo</code> class. In this case, all attributes except for
            <code>PartitionAttribute</code>, <code>SortAttribute</code>, and <code>LeaveMe</code>
            are encrypted and signed. <code>PartitionAttribute</code> and
            <code>SortAttributes</code> are only signed. The <code>LeaveMe</code> attribute is not
            encrypted or signed.</para>
          <para>To encrypt and sign the <code>record</code> item, and then add it to the
            <code>ExampleTable</code>, call the <code>save</code> method of the
            <code>DynamoDBMapper</code> class. Because your &DDB; Mapper is configured to use the
            <code>PUT</code> save behavior, the item replaces any item with the same primary keys,
            instead of updating it. This ensures that the signatures match and you can decrypt the
            item when you get it from the table.</para>
          <programlisting language="java">DataPoJo record = new DataPoJo();
record.setPartitionAttribute("is this");
record.setSortAttribute(55);
record.setExample("data");
record.setSomeNumbers(99);
record.setSomeBinary(new byte[]{0x00, 0x01, 0x02});
record.setLeaveMe("alone");

mapper.save(record);</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>

  </section>
</section>
