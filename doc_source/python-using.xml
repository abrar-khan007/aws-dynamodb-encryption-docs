<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd" [
  <!ENTITY % phrases-ddb-encrypt SYSTEM "shared/phrases-ddb-encrypt.ent">
  %phrases-ddb-encrypt;
  <!ENTITY % phrases-encryption-sdk SYSTEM "shared/phrases-encryption-sdk.ent">
    %phrases-encryption-sdk;
   <!ENTITY % phrases-kms SYSTEM "shared/phrases-kms.ent">
    %phrases-kms;    
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
    %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
    %phrases-shared;
]>
<section id="python-using" role="topic">
  <info>
    <title id="python-using.title">Using the &DDBEC; for Python</title>
    <abstract>
      <para>Learn about functions and helper classes in the &DDBEC; for Python.</para>
    </abstract>
  </info>


  <para>This topic explains some of the features of the &DDBEC; for Python that might not be found
    in other programming language implementations. These features are designed to make it easier to
    use the &DDBEC; in the most secure way. Unless you have an unusual use case, we recommend that you
    use them.</para>
  <para>For details about programming with the &DDBEC;, see the <link linkend="python-examples"
    >Python examples</link> in this guide, the <ulink
    url="&url-ddbec-python;tree/master/examples"
    >examples</ulink> in the aws-dynamodb-encryption-python repository on GitHub, and the <ulink
    url="&url-ddbec-pythondoc;">Python
    documentation</ulink> for the &DDBEC;.</para>

  <para role="topiclist-abbrev"><!-- TOPICLIST --></para>

  <section id="python-helpers">
    <info>
      <title id="python-helpers.title">Client helper classes</title>
    </info>
    <para>The &DDBEC; for Python includes several client helper classes that mirror the Boto 3
      classes for &DDB;. These helper classes are designed to make it easier to add encryption and
      signing to your existing &DDB; application and avoid the most common problems, as follows:</para>
    <itemizedlist>
      <listitem>
        <para>Prevent you from encrypting the primary key in your item, either by adding an override
          action for the primary key to the <link linkend="python-attribute-actions"
          >AttributeActions</link> object, or by throwing an exception if your
          <code>AttributeActions</code> object explicitly tells the client to encrypt the primary
          key. If the default action in your <code>AttributeActions</code> object is
          <code>DO_NOTHING</code>, the client helper classes use that action for the primary key.
          Otherwise, they use <code>SIGN_ONLY</code>.</para>
      </listitem>
      <listitem>
        <para>Create a <link linkend="python-helpers">TableInfo object</link> and populate the <link
          linkend="encryption-context">&DDB; encryption context</link> based on a call to &DDB;.
          This helps to ensure that your &DDB; encryption context is accurate and the client can
          identify the primary key.</para>
      </listitem>
      <listitem>
        <para>Support methods, such as <code>put_item</code> and <code>get_item</code>, that
          transparently encrypt and decrypt your table items when you write to or read from a &DDB;
          table. Only the <code>update_item</code> method is unsupported.</para>
      </listitem>
    </itemizedlist>
    <para>You can use the client helper classes instead of interacting directly with the lower-level
      <link linkend="item-encryptor">item encryptor</link>. Use these classes unless you need to set
      advanced options in the item encryptor.</para>
    <para>The client helper classes include:</para>
    <itemizedlist>
      <listitem>
        <para><ulink
          url="&url-ddbec-pythondoc;lib/encrypted/table.html#module-dynamodb_encryption_sdk.encrypted.table"
          >EncryptedTable</ulink> for applications that use the <ulink
            url="&url-python3-gsg;reference/services/dynamodb.html#table"
          >Table</ulink> resource in &DDB; to process one table at a time.</para>
      </listitem>
      <listitem>
        <para><ulink
          url="&url-ddbec-pythondoc;lib/encrypted/resource.html"
          >EncryptedResource</ulink> for applications that use the <ulink
            url="&url-python3-gsg;reference/services/dynamodb.html#service-resource"
          >Service Resource</ulink> class in &DDB; for batch processing.</para>
      </listitem>
      <listitem>
        <para><ulink
          url="&url-ddbec-pythondoc;lib/encrypted/client.html"
          >EncryptedClient</ulink> for applications that use the <ulink
            url="&url-python3-gsg;reference/services/dynamodb.html#client"
          >lower-level client</ulink> in &DDB;.</para>
      </listitem>
    </itemizedlist>
    <para>To use the client helper classes, the caller must have permission to call the &DDB; <ulink
      url="&url-ddb-api;API_DescribeTable.html">DescribeTable</ulink> operation on the target
      table.</para>
  </section>



  <section id="table-info">
    <info>
      <title id="table-info.title">TableInfo class</title>
    </info>
    <para>The <ulink
      url="&url-ddbec-pythondoc;lib/tools/structures.html#dynamodb_encryption_sdk.structures.TableInfo"
      >TableInfo</ulink> class is a helper class that represents a &DDB; table, complete with fields
      for its primary key and secondary indexes. It helps you to get accurate, real-time information
      about the table.</para>
    <para>If you use a <link linkend="python-helpers">client helper class</link>, it creates and
      uses a <code>TableInfo</code> object for you. Otherwise, you can create one explicitly. For an
      example, see <xref linkend="python-example-item-encryptor"
      endterm="python-example-item-encryptor.title"/>.</para>
    <para>When you call the <code>refresh_indexed_attributes</code> method on a
      <code>TableInfo</code> object, it populates the property values of the object by calling the
      &DDB; <ulink url="&url-ddb-api;API_DescribeTable.html">DescribeTable</ulink> operation.
      Querying the table is much more reliable than hard-coding index names. The
      <code>TableInfo</code> class also includes an <code>encryption_context_values</code> property
      that provides the required values for the <link linkend="encryption-context">&DDB; encryption
      context</link>. </para>
    <para>To use the <code>refresh_indexed_attributes</code> method, the caller must have permission
      to call the &DDB; <ulink url="&url-ddb-api;API_DescribeTable.html">DescribeTable</ulink>
      operation on the target table.</para>
  </section>
  
  
  
  <section id="python-attribute-actions">
    <info>
      <title id="python-attribute-actions.title">Attribute actions in Python</title>
    </info>
    <para><link linkend="attribute-actions">Attribute actions</link> tell the item encryptor which
      actions to perform on each attribute of the item. To specify attribute actions in Python,
      create an <code>AttributeActions</code> object with a default action and any exceptions for
      particular attributes. The valid values are defined in the <code>CryptoAction</code>
      enumerated type.</para>
    <important><para>&data-model-warning;</para></important>
    <programlisting language="python">DO_NOTHING = 0
SIGN_ONLY = 1
ENCRYPT_AND_SIGN = 2</programlisting>
    
    <para>For example, this <code>AttributeActions</code> object establishes
      <code>ENCRYPT_AND_SIGN</code> as the default for all attributes, and specifies exceptions for
      the <code>ISBN</code> and <code>PublicationYear</code> attributes.</para>
    <programlisting language="python">actions = AttributeActions(
    default_action=CryptoAction.ENCRYPT_AND_SIGN,
    attribute_actions={
        'ISBN': CryptoAction.DO_NOTHING,
        'PublicationYear': CryptoAction.SIGN_ONLY
    }
)</programlisting>
    <para>If you use a <link linkend="python-helpers">client helper class</link>, you don't need to
      specify an attribute action for the primary key attributes. The client helper classes prevent
      you from encrypting your primary key.</para>
    <para>If you do not use a client helper class and the default action is
      <code>ENCRYPT_AND_SIGN</code>, you must specify an action for the primary key. The recommended
      action for primary keys is <code>SIGN_ONLY</code>. To make this easy, use the
      <code>set_index_keys</code> method, which uses SIGN_ONLY for primary keys, or DO_NOTHING, when
      that is the default action.</para>
    &primary-key-warning;
    <programlisting language="python">actions = AttributeActions(
    default_action=CryptoAction.ENCRYPT_AND_SIGN,
)
actions.set_index_keys(*table_info.protected_index_keys())</programlisting>
  </section>
</section>
