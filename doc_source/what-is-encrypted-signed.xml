<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
[
  <!ENTITY % phrases-ddb-encrypt SYSTEM "shared/phrases-ddb-encrypt.ent">
  %phrases-ddb-encrypt;
   <!ENTITY % phrases-kms SYSTEM "shared/phrases-kms.ent">
    %phrases-kms;  
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
  %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
  %phrases-shared;
 ]>
<section id="encrypted-and-signed" role="topic">
  <info>
    <title id="encrypted-and-signed.title">Which fields are encrypted and signed?</title>
  </info>
  <para>In &DDB;, a <ulink url="&url-ddb-dev;HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.TablesItemsAttributes"
    >table</ulink> is a collection of items. Each <emphasis role="italic">item</emphasis> is a
    collection of <emphasis role="italic">attributes</emphasis>. Each attribute has a name and a
    value.</para>
  <para>The &DDBEC; encrypts the values of attributes. Then, it calculates a signature over the
    attributes. You can specify which attribute values to encrypt and which to include in the
    signature. </para>
  <para>Encryption protects the confidentiality of the attribute value. Signing provides integrity
    of all signed attributes and their relationship to each other, and provides authentication. It
    enables you to detect unauthorized changes to the item as a whole, including adding or deleting
    attributes, or substituting one encrypted value for another.</para>
  <para>In an encrypted item, some data remains in plaintext, including the table name, all
    attribute names, the attribute values that you don't encrypt, and the names and values of the
    primary key (partition key and sort key) attributes. Do not store sensitive data in these
    fields.</para>
  <para role="topiclist"><!-- TOPICLIST --></para>
  <section id="encrypt-attribute-values">
    <info>
      <title id="encrypt-attribute-values.title">Encrypting attribute values</title>
    </info>
    <para>The &DDBEC; encrypts the values (but not the names) of the attributes that you specify. To
      determine which attribute values are encrypted, use <link linkend="attribute-actions"
      >attribute actions</link>. </para>
    <para>For example, this item includes <code>example</code> and <code>test</code>
      attributes.</para>
    <programlisting>'example': 'data',
'test': 'test-value',
...</programlisting>
    <para>If you encrypt the <code>example</code> attribute, but don't encrypt the <code>test</code>
      attribute, the results look like the following. The encrypted <code>example</code> attribute
      value is binary data, instead of a string.</para>
    <programlisting>'example': Binary(b"'b\x933\x9a+s\xf1\xd6a\xc5\xd5\x1aZ\xed\xd6\xce\xe9X\xf0T\xcb\x9fY\x9f\xf3\xc9C\x83\r\xbb\\"),
'test': 'test-value'
...</programlisting>
    <para>The primary key attributes&emdash;partition key and sort key&emdash;of each item must
      remain in plaintext because &DDB; uses them to find the item in the table. They should be
      signed, but not encrypted. </para> &primary-key-warning; <para>The helpers in each programming
      language identify the primary key attributes for you and ensure that their values are signed,
      but not encrypted. And, if you identify your primary key and then try to encrypt it, the
      client will throw an exception. If you need to encrypt the primary key for a special use case,
      use the lower-level <link linkend="item-encryptor">item encryptor</link> directly, but
      remember that &DDB; will not be able to find your item without running a full table
      scan.</para>
    <para>The &DDBEC; also does not encrypt or sign the <link linkend="material-description"
      >material description attribute</link>, which stores information that the &DDBEC; needs to
      verify and decrypt the item. </para>
  </section>
  <section id="sign-the-item">
    <info>
      <title id="sign-the-item.title">Signing the item</title>
    </info>
    <para>After encrypting the specified attribute values, the &DDBEC; calculates a digital
      signature over the names and values of attributes that you specify in the <link
      linkend="attribute-actions">attribute actions</link> object. The client saves the signature in
      an attribute that it adds to the item.</para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/encrypted-signed-item.png" format="PNG" scale="70"/>
      </imageobject>
      <textobject>
        <phrase>An encrypted and signed table item</phrase>
      </textobject>
    </mediaobject>
    <para>If you provide a table name, it's included in the signature. This allows you to detect that
      a signed item was moved to a different table, perhaps maliciously, such as moving an employee
      record from the <code>AllEmployees</code> to <code>TrustedEmployees</code> table. The &DDBEC;
      gets the table name from the <link linkend="encryption-context">&DDB; encryption
      context</link>, where it is an optional field. </para>
    <para>Be sure to include the primary key in the signature. It's the default behavior when you
      use a helper. The signature captures the relationship between the primary key and other
      attributes in the item, and the signature validation verifies that the relationship hasn't
      changed. </para>
    <para>The <link linkend="material-description">material description attribute</link> is not
      encrypted or signed.</para>
  </section>
  <section id="encrypted-signed-example">
    <info>
      <title id="encrypted-signed-example.title">An encrypted and signed item</title>
    </info>
    <para>When the &DDBEC; encrypts and signs a table item, the result is a standard &DDB; table
      item with encrypted attribute values. </para>
    <para>The following figure shows a part of an example encrypted and signed table item. </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/encrypted-item-closeup.png" format="PNG" scale="80"/>
      </imageobject>
      <textobject>
        <phrase>An example encrypted and signed table item</phrase>
      </textobject>
    </mediaobject>
    <para>The figure shows the following characteristics of table items that the &DDBEC; encrypts
      and signs:</para>
    <itemizedlist>
      <listitem>
        <para>All attribute names are in plaintext.</para>
      </listitem>
      <listitem>
        <para>The values of the primary key attributes are in plaintext. In this example, the
          partition key name is <code>partition_attribute</code> and the sort key name is
          <code>sort_attribute</code>.</para>
      </listitem>
      <listitem>
        <para>The values of any attributes that you tell the client not to encrypt remain in
          plaintext. In this example, the value of the <code>test</code> attribute is in
          plaintext.</para>
      </listitem>
      <listitem>
        <para>The values of encrypted attributes are binary data.</para>
      </listitem>
      <listitem>
        <para>The client adds a signature attribute
          (<code>*amzn-ddb-map-sig*</code>)
          to the item. Its value is the item signature.</para>
      </listitem>
      <listitem>
        <para>The client adds a <link linkend="material-description">material description
          attribute</link>
          (<code>*amzn-ddb-map-desc*</code>)
          to the item. Its value describes how the attribute was encrypted and signed. The client
          uses this information to verify and decrypt the item. The material description attribute
          is not encrypted or signed.</para>
      </listitem>
    </itemizedlist>
  </section>
</section>
