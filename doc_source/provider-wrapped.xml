<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
[
  <!ENTITY % phrases-ddb-encrypt SYSTEM "shared/phrases-ddb-encrypt.ent">
  %phrases-ddb-encrypt;
   <!ENTITY % phrases-kms SYSTEM "shared/phrases-kms.ent">
    %phrases-kms;  
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
  %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
  %phrases-shared;
 ]>
<section id="wrapped-provider" role="topic">
  <info>
    <title id="wrapped-provider.title">&wrapped-cmp-long;</title>
    <titleabbrev>&wrapped-cmp;</titleabbrev>
    <abstract>
      <para>Learn about the &wrapped-cmp-long; in the &DDBEC; and how to use it in your
        &DDB; applications.</para>
    </abstract>
  </info>
  <para>The <emphasis role="italic">&wrapped-cmp-long;</emphasis> (Wrapped CMP) lets you use
    wrapping and signing keys from any source with the &DDBEC;. The Wrapped CMP does not depend on
    any AWS service. However, you must generate and manage your wrapping and signing keys outside of
    the client, including providing the correct keys to verify and decrypt the item. </para>
  <para>The Wrapped CMP generates a unique item encryption key for each item. It wraps the item
    encryption key with the wrapping key that you provide and saves the wrapped item encryption key
    in the <link linkend="material-description">material description attribute</link> of the item.
    Because you supply the wrapping and signing keys, you determine how the wrapping and signing
    keys are generated and whether they are unique to each item or are reused. </para>
  <para>The Wrapped CMP is a secure implementation and a good choice for applications that can
    manage cryptographic materials.</para>
  <para>The Wrapped CMP is one of several <link linkend="concept-material-provider">cryptographic
    materials provider</link> (CMPs) that the &DDBEC; supports. For information about the other
    CMPs, see <xref linkend="crypto-materials-providers" endterm="crypto-materials-providers.title"
    />.</para>
  <para><emphasis role="bold">For example code, see:</emphasis></para>
  <itemizedlist>
    <listitem>
      <para>Java: <ulink
        url="&url-ddbec-java;blob/master/examples/com/amazonaws/examples/AsymmetricEncryptedItem.java"
        >AsymmetricEncryptedItem</ulink></para>
    </listitem>
    <listitem>
      <para>Python: <ulink
        url="&url-ddbec-python;blob/master/examples/src/wrapped_rsa_encrypted_table.py"
        >wrapped-rsa-encrypted-table</ulink>, <ulink
        url="&url-ddbec-python;blob/master/examples/src/wrapped_symmetric_encrypted_table.py"
        >wrapped-symmetric-encrypted-table</ulink></para>
    </listitem>
  </itemizedlist>
  <para role="topiclist"><!-- TOPICLIST --></para>

  <section id="wrapped-cmp-how-to-use">
    <info>
      <title id="wrapped-cmp-how-to-use.title">How to use it</title>
    </info>
    <para>To create a Wrapped CMP, specify a wrapping key (required on encrypt), an unwrapping key
      (required on decrypt), and a signing key. You must supply keys when you encrypt and decrypt
      items.</para>
    <para>The wrapping, unwrapping, and signing keys can be symmetric keys or asymmetric key pairs. </para>
    <tablist>
      <tablistentry>
        <tabname>Java</tabname>
        <tabcontent>
          <programlisting language="java">// This example uses asymmetric wrapping and signing key pairs
final KeyPair wrappingKeys = ...
final KeyPair signingKeys = ...

final WrappedMaterialsProvider cmp = 
    new WrappedMaterialsProvider(wrappingKeys.getPublic(),
                                 wrappingKeys.getPrivate(),
                                 signingKeys);</programlisting>
        </tabcontent>
      </tablistentry>
      <tablistentry>
        <tabname>Python</tabname>
        <tabcontent>
          <programlisting language="python"># This example uses symmetric wrapping and signing keys
wrapping_key = ...
signing_key  = ...

wrapped_cmp = WrappedCryptographicMaterialsProvider(
    wrapping_key=wrapping_key,
    unwrapping_key=wrapping_key,
    signing_key=signing_key
)</programlisting>
        </tabcontent>
      </tablistentry>

    </tablist>
  </section>
  <section id="wrapped-cmp-how-it-works">
    <info>
      <title id="wrapped-cmp-how-it-works.title">How it works</title>
    </info>
    <para>The Wrapped CMP generates a new item encryption key for every item. It uses the wrapping,
      unwrapping, and signing keys that you provide, as shown in the following diagram.</para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/wrappedCMP.png" format="PNG" scale="85"/>
      </imageobject>
      <textobject>
        <phrase>The input, processing, and output of the &wrapped-cmp-long; in the
          &DDBEC;</phrase>
      </textobject>
    </mediaobject>
    <para role="topiclist"><!-- TOPICLIST --></para>

    <section id="wrapped-cmp-get-encryption-materials">
      <info>
        <title id="wrapped-cmp-get-encryption-materials.title">Get encryption materials</title>
      </info>
      <para>This section describes in detail the inputs, outputs, and processing of the Wrapped
        Materials Provider (Wrapped CMP) when it receives a request for encryption materials. </para>
      <para><emphasis role="bold">Input</emphasis> (from application)</para>
      <itemizedlist>
        <listitem>
          <para>Wrapping key: An <ulink
            url="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Advanced Encryption
            Standard</ulink> (AES) symmetric key, or an <ulink
            url="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">RSA</ulink> public key. Required
            if any attribute values are encrypted. Otherwise, it is optional and ignored.</para>
        </listitem>
        <listitem>
          <para>Unwrapping key: Optional and ignored. </para>
        </listitem>
        <listitem>
          <para>Signing key</para>
        </listitem>
      </itemizedlist>
      <para><emphasis role="bold">Input</emphasis> (from the item encryptor)</para>
      <itemizedlist>
        <listitem>
          <para><link linkend="encryption-context">&DDB; encryption context</link></para>
        </listitem>
      </itemizedlist>
      <para><emphasis role="bold">Output</emphasis> (to the item encryptor):</para>
      <itemizedlist>
        <listitem>
          <para>Plaintext item encryption key</para>
        </listitem>
        <listitem>
          <para>Signing key (unchanged)</para>
        </listitem>
        <listitem>
          <para><link linkend="material-description">Actual material description</link>: These
            values are saved in the <link linkend="material-description">material description
            attribute</link> that the client adds to the item. </para>
          <itemizedlist>
            <listitem>
              <para><code>amzn-ddb-env-key</code>: Base64-encoded wrapped item encryption key</para>
            </listitem>
            <listitem>
              <para><code>amzn-ddb-env-alg</code>: Encryption algorithm used to encrypt the item.
                The default is AES-256-CBC.</para>
            </listitem>
            <listitem>
              <para><code>amzn-ddb-wrap-alg</code>: The wrapping algorithm that the Wrapped CMP used
                to wrap the item encryption key. If the wrapping key is an AES key, the key is
                wrapped using unpadded <code>AES-Keywrap</code> as defined in <ulink
                url="https://tools.ietf.org/html/rfc3394.html">RFC 3394</ulink>. If the wrapping key
                is an RSA key, the key is encrypted by using RSA OAEP with MGF1 padding. </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <para><emphasis role="bold">Processing</emphasis></para>
      <para>When you encrypt an item, you pass in a wrapping key and a signing key. An unwrapping
        key is optional and ignored.</para>
      <orderedlist>
        <listitem>
          <para>The Wrapped CMP generates a unique symmetric item encryption key for the table
            item.</para>
        </listitem>
        <listitem>
          <para>It uses the wrapping key that you specify to wrap the item encryption key. Then, it
            removes it from memory as soon as possible.</para>
        </listitem>
        <listitem>
          <para>It returns the plaintext item encryption key, the signing key that you supplied, and
            an <link linkend="material-description">actual material description</link> that includes
            the wrapped item encryption key, and the encryption and wrapping algorithms.</para>
        </listitem>
        <listitem>
          <para>The item encryptor uses the plaintext encryption key to encrypt the item. It uses
            the signing key that you supplied to sign the item. Then, it removes the plaintext keys
            from memory as soon as possible. It copies the fields in the actual material
            description, including the wrapped encryption key (<code>amzn-ddb-env-key</code>), to
            the material description attribute of the item.</para>
        </listitem>
      </orderedlist>
    </section>
    <section id="wrapped-cmp-get-decryption-materials">
      <info>
        <title id="wrapped-cmp-get-decryption-materials.title">Get decryption materials</title>
      </info>
      <para>This section describes in detail the inputs, outputs, and processing of the Wrapped
        Materials Provider (Wrapped CMP) when it receives a request for decryption materials. </para>
      <para><emphasis role="bold">Input</emphasis> (from application)</para>
      <itemizedlist>
        <listitem>
          <para>Wrapping key: Optional and ignored.</para>
        </listitem>
        <listitem>
          <para>Unwrapping key: The same <ulink
            url="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Advanced Encryption
            Standard</ulink> (AES) symmetric key or <ulink
            url="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">RSA</ulink> private key that
            corresponds to the RSA public key used to encrypt. Required if any attribute values are
            encrypted. Otherwise, it is optional and ignored.</para>
        </listitem>
        <listitem>
          <para>Signing key</para>
        </listitem>
      </itemizedlist>
      <para><emphasis role="bold">Input</emphasis> (from the item encryptor)</para>
      <itemizedlist>
        <listitem>
          <para>A copy of the <link linkend="encryption-context">&DDB; encryption context</link>
            that contains the contents of the material description attribute.</para>
        </listitem>
      </itemizedlist>
      <para><emphasis role="bold">Output</emphasis> (to the item encryptor)</para>
      <itemizedlist>
        <listitem>
          <para>Plaintext item encryption key</para>
        </listitem>
        <listitem>
          <para>Signing key (unchanged)</para>
        </listitem>
      </itemizedlist>
      <para><emphasis role="bold">Processing</emphasis></para>
      <para>When you decrypt an item, you pass in an unwrapping key and a signing key. A wrapping
        key is optional and ignored.</para>
      <orderedlist>
        <listitem>
          <para>The Wrapped CMP gets the wrapped item encryption key from the material description
            attribute of the item.</para>
        </listitem>
        <listitem>
          <para>It uses the unwrapping key and algorithm to unwrap the item encryption key. </para>
        </listitem>
        <listitem>
          <para>It returns the plaintext item encryption key, the signing key, and encryption and
            signing algorithms to the item encryptor.</para>
        </listitem>
        <listitem>
          <para>The item encryptor uses the signing key to verify the item. If it succeeds, it uses
            the item encryption key to decrypt the item. Then, it removes the plaintext keys from
            memory as soon as possible.</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

</section>
