<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
[
  <!ENTITY % phrases-ddb-encrypt SYSTEM "shared/phrases-ddb-encrypt.ent">
  %phrases-ddb-encrypt;
   <!ENTITY % phrases-kms SYSTEM "shared/phrases-kms.ent">
    %phrases-kms;  
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
  %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
  %phrases-shared;
 ]>
<section id="how-it-works" role="topic">
  <info>
    <title id="how-it-works.title">How the &DDBEC; works</title>
    <titleabbrev>How it works</titleabbrev>
  </info>
  <para>The &DDBEC; is designed specifically to protect the data that you store in &DDB;. The
    libraries include secure implementations that you can extend or use unchanged. And, most
    elements are represented by abstract elements so you can create and use compatible custom
    components.</para>
  <para><emphasis role="bold">Encrypting and signing table items</emphasis></para>
  <para>At the core of the &DDBEC; is an <emphasis role="italic">item encryptor</emphasis> that
    encrypts, signs, verifies, and decrypts table items. It takes in information about your table
    items and instructions about which items to encrypt and sign. It gets the encryption materials,
    and instructions on how to use them, from a <link linkend="concept-material-provider"
    >cryptographic material provider</link> that you select and configure. </para>
  <para>The following diagram shows a high-level view of this process.</para>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/arch-encrypt.png" format="PNG" scale="70"/>
    </imageobject>
    <textobject>
      <phrase>Encrypting and signing items in the &DDBEC;</phrase>
    </textobject>
  </mediaobject>
  <para>To encrypt and sign a table item, the &DDBEC; needs:</para>
  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Information about the table. </emphasis> It gets information about
        the table from a <link linkend="encryption-context">&DDB; encryption context</link> that you
        supply. Some helpers get the required information from &DDB; and create the &DDB; encryption
        context for you. </para>
      &encryption-context-note;
    </listitem>
    <listitem>
      <para><emphasis role="bold">Which attributes to encrypt and sign.</emphasis> It gets this
        information from the <link linkend="attribute-actions">attribute actions</link> that you
        supply.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Encryption materials, including encryption and signing
        keys.</emphasis> It gets these from a <link linkend="concept-material-provider"
        >cryptographic materials provider</link> (CMP) that you select and configure. </para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Instructions for encrypting and signing the item</emphasis>. The
        CMP adds instructions for using the encryption materials, including encryption and signing
        algorithms, to the <link linkend="material-description">actual material
        description</link>.</para>
    </listitem>
  </itemizedlist>
  <para>The <link linkend="item-encryptor">item encryptor</link> uses all of these elements to
    encrypt and sign the item. The item encryptor also adds two attributes to the item: a <link
    linkend="material-description">material description attribute</link> that contains the
    encryption and signing instructions (the actual material description), and an attribute that
    contains the signature. You can interact with the item encryptor directly, or use helper
    features that interact with the item encryptor for you to implement secure default
    behavior.</para>
  <para>The result is a DynamoDB item containing encrypted and signed data.</para>
  <para><emphasis role="bold">Verifying and decrypting table items</emphasis></para>
  <para>These components also work together to verify and decrypt your item, as shown in the
    following diagram.</para>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/arch-decrypt.png" format="PNG" scale="70"/>
    </imageobject>
    <textobject>
      <phrase>Verifying and decrypting items in the &DDBEC;</phrase>
    </textobject>
  </mediaobject>
  <para>To verify and decrypt an item, the &DDBEC; needs the same components, components with the
    same configuration, or components especially designed for decrypting the items, as
    follows:</para>
  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Information about the table</emphasis> from the <link
        linkend="encryption-context">&DDB; encryption context</link>.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Which attributes to verify and decrypt.</emphasis> It gets these
        from the <link linkend="attribute-actions">attribute actions</link>.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Decryption materials, including verification and decryption
        keys</emphasis>, from the <link linkend="concept-material-provider">cryptographic materials
        provider</link> (CMP) that you select and configure.</para>
      <para>The encrypted item doesn't include any record of the CMP that was used to encrypt it.
        You must supply the same CMP, a CMP with the same configuration, or a CMP that is designed
        to decrypt items.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Information about how the item was encrypted and signed</emphasis>, including the encryption and signing algorithms. The client gets these from
        the <link linkend="material-description">material description attribute</link> in the
        item.</para>
    </listitem>
  </itemizedlist>
  <para>The <link linkend="item-encryptor">item encryptor</link> uses all of these elements to
    verify and decrypt the item. It also removes the material description and signature attributes.
    The result is a plaintext &DDB; item.</para>
</section>
