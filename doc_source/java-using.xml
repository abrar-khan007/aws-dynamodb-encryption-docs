<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd" [
  <!ENTITY % phrases-ddb-encrypt SYSTEM "shared/phrases-ddb-encrypt.ent">
  %phrases-ddb-encrypt;
  <!ENTITY % phrases-encryption-sdk SYSTEM "shared/phrases-encryption-sdk.ent">
    %phrases-encryption-sdk;
  <!ENTITY % phrases-kms SYSTEM "shared/phrases-kms.ent">
    %phrases-kms;
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
    %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
    %phrases-shared;
]>
<section id="java-using" role="topic">
  <info>
    <title id="java-using.title">Using the &DDBEC; for Java</title>
    <abstract>
      <para>Learn about functions and helper classes in the &DDBEC; for Java.</para>
    </abstract>
  </info>


  <para>This topic explains some of the features of the &DDBEC; in Java that might not be found in
    other programming language implementations. </para>
  <para>For details about programming with the &DDBEC;, see the <link linkend="java-examples">Java
    examples</link>, the <ulink url="&url-ddbec-java;tree/master/examples">examples</ulink> in the
    <code>aws-dynamodb-encryption-java repository</code> on GitHub, and the <ulink
    url="&url-ddbec-javadoc;">Javadoc</ulink> for the &DDBEC;.</para>
  <para/>


  <para role="topiclist-abbrev"><!-- TOPICLIST --></para>
  <section id="attribute-encryptor">
    <info>
      <title id="attribute-encryptor.title">Item encryptors: AttributeEncryptor and
        DynamoDBEncryptor</title>
      <titleabbrev>Item encryptors</titleabbrev>
    </info>
    <para>The &DDBEC; in Java has two <link linkend="item-encryptor">item encryptors</link>: the
      lower-level <ulink
      url="&url-ddbec-javadoc;com/amazonaws/services/dynamodbv2/datamodeling/encryption/DynamoDBEncryptor.html"
      >DynamoDBEncryptor</ulink> and the <link linkend="attribute-encryptor"
      >AttributeEncryptor</link>. </para>
    <para>The <code>AttributeEncryptor</code> is a helper class that helps you use the <ulink url="&url-ddb-dev;DynamoDBMapper.Methods.html"
            >DynamoDBMapper</ulink> in the &Javalong; with the <code>DynamoDB Encryptor</code> in the &DDBEC;. When you use the <code>AttributeEncryptor</code>
         with the <code>DynamoDBMapper</code>, it transparently encrypts and signs your items when you save them. It also transparently verifies and decrypts
         your items when you load them.</para>
  </section>

  <section id="save-behavior"><info><title id="save-behavior.title">Configuring save behavior</title></info>
    <para>You can use the <code>AttributeEncryptor</code> and <code>DynamoDBMapper</code> to add or edit table items with attributes that are signed only or
         encrypted and signed. For these tasks, we recommend that you configure it to use the <code>PUT</code> save behavior, as shown in the following example.
         Otherwise, you might not be able to decrypt your data. </para>
    <programlisting language="java">DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder().withSaveBehavior(SaveBehavior.PUT).build();
DynamoDBMapper mapper = new DynamoDBMapper(ddb, mapperConfig, new AttributeEncryptor(encryptor));</programlisting>
    <para>If you use the default save behavior, which updates the attributes in the table item, only
      attributes that have changed are included in the signature. That signature might not match the
      signature of the entire item that is calculated on decrypt.</para>
    <para>You can also use the <code>CLOBBER</code> save behavior. This behavior is identical to the <code>PUT</code> save behavior except that it disables
         optimistic locking and overwrites the item in the table.</para>
    <para>To see this code used in an example, see <xref linkend="java-example-dynamodb-mapper"
      endterm="java-example-dynamodb-mapper.title"/> and the <ulink
        url="&url-ddbec-java;blob/master/examples/com/amazonaws/examples/AwsKmsEncryptedObject.java"
        >AwsKmsEncryptedObject.java</ulink> example in the <code>aws-dynamodb-encryption-java</code> repository in GitHub.</para>
  </section>


  <section id="attribute-actions-java">
    <info>
      <title id="attribute-actions-java.title">Attribute actions in Java</title>
    </info>
    <para><link linkend="attribute-actions">Attribute actions</link> determine which attribute
      values are encrypted and signed, which are only signed, and which are ignored. The method you
      use to specify attribute actions depends on whether you use the <code>DynamoDBMapper</code>
      and <code>AttributeEncryptor</code>, or the lower-level <ulink
      url="&url-ddbec-javadoc;com/amazonaws/services/dynamodbv2/datamodeling/encryption/DynamoDBEncryptor.html"
      >DynamoDBEncryptor</ulink>.</para>
    <important><para>&data-model-warning;</para></important>
    
    <collapsible>
      <section id="attribute-action-java-mapper">
        <info>
          <title id="attribute-action-java-mapper.title">Attribute actions for the DynamoDBMapper</title>
        </info>
        <para>When you use the <code>DynamoDBMapper</code> and <code>AttributeEncryptor</code>, you use annotations to specify the attribute
               actions. The &DDBEC; uses the <ulink url="&url-ddb-dev;DynamoDBMapper.Annotations.html">standard &DDB; attribute annotations</ulink> that define
               the attribute type to determine how to protect an attribute. By default, all attributes are encrypted and signed except for primary keys, which
               are signed but not encrypted.</para>
        <note>
          <para>Do not encrypt the value of attributes with the <ulink
            url="&url-ddb-dev;DynamoDBMapper.OptimisticLocking.html">@DynamoDBVersionAttribute
            annotation</ulink>, although you can (and should) sign them. Otherwise, conditions that
            use its value will have unintended effects.</para>
        </note>
        <programlisting language="java">// Attributes are encrypted and signed
@DynamoDBAttribute(attributeName="Description")

// Partition keys are signed but not encrypted
@DynamoDBHashKey(attributeName="Title")

// Sort keys are signed but not encrypted
@DynamoDBRangeKey(attributeName="Author")</programlisting>
        <para>To specify exceptions, use the encryption annotations defined in the &DDBEC; for Java.
          If you specify them at the class level, they become the default value for the
          class.</para>
        <programlisting language="java">// Sign only
@DoNotEncrypt

// Do nothing; not encrypted or signed
@DoNotTouch</programlisting>
        <para>For example, these annotations sign but do not encrypt the
          <code>PublicationYear</code> attribute, and do not encrypt or sign the <code>ISBN</code>
          attribute value.</para>
        <programlisting language="java">// Sign only (override the default)
@DoNotEncrypt
@DynamoDBAttribute(attributeName="PublicationYear")

// Do nothing (override the default)
@DoNotTouch
@DynamoDBAttribute(attributeName="ISBN")</programlisting>
        <!-- <para>For an example of using the &DDB; Mapper and AttributeEncryptor, see <xref
          linkend="java-example-dynamodb-mapper" endterm="java-example-dynamodb-mapper.title"/>.</para> -->
      </section>
      <section id="attribute-action-default">
        <info>
          <title id="attribute-action-default.title">Attribute actions for the
            DynamoDBEncryptor</title>
        </info>
        <para>To specify attribute actions when you use the <ulink
          url="&url-ddbec-javadoc;com/amazonaws/services/dynamodbv2/datamodeling/encryption/DynamoDBEncryptor.html"
          >DynamoDBEncryptor</ulink> directly, create a <code>HashMap</code> object in which the
          name-value pairs represent attribute names and the specified actions. </para>
        <para>The valid values are for the attribute actions are defined in the
          <code>EncryptionFlags</code> enumerated type. You can use <code>ENCRYPT</code> and
          <code>SIGN</code> together, use <code>SIGN</code> alone, or omit both. However, if you use
          <code>ENCRYPT</code> alone, the &DDBEC; throws an error. You cannot encrypt an attribute
          that you don't sign.</para>
        <programlisting language="java">ENCRYPT
SIGN</programlisting> &primary-key-warning; <para>If you specify a primary key in the encryption context and then specify <code>ENCRYPT</code>
          in the attribute action for either primary key attribute, the &DDBEC; throws an
          exception.</para>
        <para>For example, the following Java code creates an <code>actions</code> HashMap that
          encrypts and signs all attributes in the <code>record</code> item. The exceptions are the
          partition key and sort key attributes, which are signed but not encrypted, and the
          <code>test</code> attribute, which is not signed or encrypted.</para>
        <programlisting language="java">final EnumSet&lt;EncryptionFlags> signOnly = EnumSet.of(EncryptionFlags.SIGN);
final EnumSet&lt;EncryptionFlags> encryptAndSign = EnumSet.of(EncryptionFlags.ENCRYPT, EncryptionFlags.SIGN);
final Map&lt;String, Set&lt;EncryptionFlags>> actions = new HashMap&lt;>();

for (final String attributeName : record.keySet()) {
  switch (attributeName) {
    case partitionKeyName: // no break; falls through to next case
    case sortKeyName:
      // Partition and sort keys must not be encrypted, but should be signed
      actions.put(attributeName, signOnly);
      break;
    case "test":
      // Don't encrypt or sign
      break;
    default:
      // Encrypt and sign everything else
      actions.put(attributeName, encryptAndSign);
      break;
  }
}</programlisting>
        <para>Then, when you call the <ulink
          url="&url-ddbec-javadoc;com/amazonaws/services/dynamodbv2/datamodeling/encryption/DynamoDBEncryptor.html#encryptRecord-java.util.Map-java.util.Map-com.amazonaws.services.dynamodbv2.datamodeling.encryption.EncryptionContext-"
          >encryptRecord</ulink> method of the <code>DynamoDBEncryptor</code>, specify the map as
          the value of the <code>attributeFlags</code> parameter. For example, this call to
          <code>encryptRecord</code> uses the <code>actions</code> map.</para>
        <programlisting language="java">// Encrypt the plaintext record
final Map&lt;String, AttributeValue&gt; encrypted_record = encryptor.encryptRecord(record, actions, encryptionContext);</programlisting>
      </section>
    </collapsible>
  </section>


  <section id="override-table-name"><info><title
    id="override-table-name.title">Overriding table names</title></info><para>In the &DDBEC;, the name of the &DDB; table is an element of the <link
      linkend="encryption-context">&DDB; encryption context</link> that is passed to the encryption
      and decryption methods. When you encrypt or sign table items, the &DDB; encryption context,
      including the table name, is cryptographically bound to the ciphertext. If the &DDB;
      encryption context that is passed to the decrypt method doesn't match the &DDB; encryption
      context that was passed to the encrypt method, the decrypt operation fails.</para>
    <para>Occasionally, the name of a table changes, such as when you back up a table or perform a
      <ulink
      url="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
      >point-in-time recovery</ulink>. When you decrypt or verify the signature of these items, you
      must pass in the same &DDB; encryption context that was used to encrypt and sign the items,
      including the original table name. The current table name is not needed. </para>
    <para>When you use the <code>DynamoDBEncryptor</code>, you assemble the &DDB; encryption context
      manually. However, if you are using the <code>DynamoDBMapper</code>, the
      <code>AttributeEncryptor</code> creates the &DDB; encryption context for you, including the
      current table name. To tell the <code>AttributeEncryptor</code> to create an encryption
      context with a different table name, use the <code>EncryptionContextOverrideOperator</code>. </para>
    <para>For example, the following code creates instances of the cryptographic materials provider (CMP) and the <code>DynamoDBEncryptor</code>. Then it calls
         the <code>setEncryptionContextOverrideOperator</code> method of the <code>DynamoDBEncryptor</code>. It uses the
            <code>overrideEncryptionContextTableName</code> operator, which overrides one table name. When it is configured this way, the
            <code>AttributeEncryptor</code> creates a &DDB; encryption context that includes <code>newTableName</code> in place of <code>oldTableName</code>.
         For a complete example, see <ulink
            url="&url-java-ddb-client-github;blob/master/examples/com/amazonaws/examples/EncryptionContextOverridesWithDynamoDBMapper.java"
            >EncryptionContextOverridesWithDynamoDBMapper.java</ulink>.</para>
    <programlisting language="java">final DirectKmsMaterialProvider cmp = new DirectKmsMaterialProvider(kms, cmkArn);
final DynamoDBEncryptor encryptor = DynamoDBEncryptor.getInstance(cmp);

encryptor.setEncryptionContextOverrideOperator(EncryptionContextOperators.overrideEncryptionContextTableName(
                oldTableName, newTableName));</programlisting>
    <para>When you call the load method of the <code>DynamoDBMapper</code>, which decrypts and verifies the item, you specify the original table name.</para>
    <programlisting>mapper.load(itemClass, DynamoDBMapperConfig.builder()
                .withTableNameOverride(DynamoDBMapperConfig.TableNameOverride.withTableNameReplacement(oldTableName))
                .build());</programlisting>
    <para>You can also use the <code>overrideEncryptionContextTableNameUsingMap</code> operator,
      which overrides multiple table names. </para>
    <para>The table name override operators are typically used when decrypting data and verifying
      signatures. However, you can use them to set the table name in the &DDB; encryption context to
      a different value when encrypting and signing.</para>
    <para>Do not use the table name override operators if you are using the <code>DynamoDBEncryptor</code>. Instead, create an encryption context with the
         original table name and submit it to the decryption method.</para></section>


</section>
