<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "file://zonbook/docbookx.dtd"
[
  <!ENTITY % phrases-ddb-encrypt SYSTEM "shared/phrases-ddb-encrypt.ent">
  %phrases-ddb-encrypt;
   <!ENTITY % phrases-kms SYSTEM "shared/phrases-kms.ent">
    %phrases-kms;  
  <!ENTITY % xinclude SYSTEM "file://AWSShared/common/xinclude.mod">
  %xinclude;
  <!ENTITY % phrases-shared SYSTEM "file://AWSShared/common/phrases-shared.ent">
  %phrases-shared;
 ]>
<section id="client-server-side" role="topic">
  <info>
    <title id="client-server-side.title">Client-side and server-side encryption</title>
  </info>
  <para>The &DDBEC; supports <emphasis role="italic">client-side encryption</emphasis>, where you
    encrypt your table data before you send it to &DDB;. However, &DDB; provides a server-side
    <emphasis>encryption at rest</emphasis> feature that transparently encrypts your table when it
    is persisted to disk and decrypts it when you access the table. </para>
  <para>The tools that you choose depend on the sensitivity of your data and the security
    requirements of your application. You can use both the &DDBEC; and encryption at rest. When you
    send encrypted and signed items to &DDB;, &DDB; doesn't recognize the items as being protected.
    It just detects typical table items with binary attribute values. </para>
  <para><emphasis role="bold">Server-side encryption at rest</emphasis></para>
  <para>&DDB; supports <ulink url="&url-ddb-dev;EncryptionAtRest.html">encryption at rest</ulink>, a
      <emphasis role="italic">server-side encryption</emphasis> feature in which DynamoDB
    transparently encrypts your tables for you when the table is persisted to disk, and decrypts
    them when you access the table data. </para>
  <para>With server-side encryption, your data is encrypted in transit over an HTTPS connection,
    decrypted at the DynamoDB endpoint, and then re-encrypted before being stored in
    DynamoDB.</para>
  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Encryption by default.</emphasis> &DDB; transparently encrypts and
        decrypts all tables when they are written to disk. There is no option to enable or disable
        encryption at rest. </para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">&DDB; creates and manages the cryptographic keys. </emphasis>The
        unique key for each table is protected by an <ulink url="&url-kms-dev;">&KMSlong;</ulink>
        (&KMS;) &CMKlong; that never leaves &KMS; unencrypted. By default, &DDB; uses an
          <ulink url="&url-kms-dev;concepts.html#aws-owned-cmk">&AWS; owned &CMK;</ulink> in the &DDB;
        service account, but you can choose an <ulink
          url="&url-kms-dev;concepts.html#aws-managed-cmk">&AWS; managed &CMK;</ulink> in your account
        to protect some or all of your tables.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">All table data is encrypted on disk. </emphasis>When an encrypted
        table is saved to disk, &DDB; encrypts all table data, including the <ulink
        url="&url-ddb-dev;HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey"
        >primary key</ulink> and local and global <ulink
        url="&url-ddb-dev;HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.SecondaryIndexes"
        >secondary indexes</ulink>. If your table has a sort key, some of the sort keys that mark
        range boundaries are stored in plaintext in the table metadata.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Objects related to tables are encrypted, too.</emphasis>
        Encryption at rest protects <ulink url="&url-ddb-dev;Streams.html">&DDB; streams</ulink>,
        <ulink url="&url-ddb-dev;GlobalTables.html">global tables</ulink>, and <ulink
        url="&url-ddb-dev;BackupRestore.html">backups</ulink> whenever they are written to durable
        media.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">Your items are decrypted when you access them. </emphasis>When you
        access the table, &DDB; decrypts the part of the table that includes your target item, and
        returns the plaintext item to you.</para>
    </listitem>
  </itemizedlist>
  <para>&nbsp;</para>
  <para><emphasis role="bold">&DDBEC;</emphasis></para>
  <para>Client-side encryption provides end-to-end protection for your data, in transit and at rest,
    from its source to storage in DynamoDB. Your plaintext data is never exposed to any third party,
    including &AWS;. However, you need to add the encryption features to your &DDB; applications. </para>
  <itemizedlist>
    <listitem>
      <para><emphasis role="bold">Your data is protected in transit and at rest.</emphasis> It is
        never exposed to any third party, including AWS.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">You can sign your table Items.</emphasis> You can direct the
        &DDBEC; to calculate a signature over all or part of a table item, including the primary key
        attributes and the table name. This signature allows you to detect unauthorized changes to
        the item as a whole, including adding or deleting attributes, or swapping attribute
        values.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">You choose how your cryptographic keys are generated and
        protected.</emphasis> You can create and manage your keys, or use a cryptographic service,
        such as &KMSlong; or <ulink url="&url-hsm-ug;">&HSM;</ulink>, to generate and protect your
        keys.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">You determine how your data is protected </emphasis>by <link
        linkend="crypto-materials-providers">selecting a cryptographic materials provider</link>
        (CMP), or writing one of your own. The CMP determines the encryption strategy used,
        including when unique keys are generated, and the encryption and signing algorithms that are
        used.</para>
    </listitem>
    <listitem>
      <para><emphasis role="bold">The &DDBEC; doesn't encrypt the entire table.</emphasis> You can
        encrypt selected items in a table, or selected attribute values in some or all items.
        However, the &DDBEC; does not encrypt an entire item. It does not encrypt attribute names,
        or the names or values of the primary key (partition key and sort key) attributes. For
        details about what is encrypted (and what is not), see <xref
          linkend="encrypted-and-signed" endterm="encrypted-and-signed.title"></xref>.</para>
    </listitem>
  </itemizedlist>
  <para>&nbsp;</para>
  <para><emphasis role="bold">&CryptoSDK;</emphasis></para>
  <para>If you are encrypting data that you store in &DDB;, we recommend the &DDBEC;. </para>
  <para>The <ulink url="&url-CryptoSDK-dev;">&CryptoSDKlong;</ulink> is a client-side encryption
    library that helps you to encrypt and decrypt generic data. Although it can protect any type of
    data, it isn't designed to work with structured data, like database records. Unlike the &DDBEC;,
    the &CryptoSDK; cannot provide item-level integrity checking and it has no logic to recognize
    attributes or prevent encryption of primary keys.</para>
  <para>If you use the &CryptoSDK; to encrypt any element of your table, remember that it isn't
    compatible with the &DDBEC;. You cannot encrypt with one library and decrypt with the
    other.</para>
</section>
